<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图像拼接</title>
      <link href="/2024/11/06/%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5/"/>
      <url>/2024/11/06/%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能</strong>：分为图像拼接和图像融合两种，融合是指把两张有重叠区域的图像融合成一张图像<br><strong>注意</strong>：这个融合是基于灰度值的，所以对于两次分开拍摄的图像存在融合失败的可能。</p></blockquote><p>基础的XY方向拼接</p><p>图像融合（图像之间具有重合部分）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">dev_update_off()</span><br><span class="line"></span><br><span class="line">read_image (Image1, &#x27;mosaic/building_01&#x27;)</span><br><span class="line">read_image (Image2, &#x27;mosaic/building_02&#x27;)</span><br><span class="line">get_image_size (Image1, Width, Height)</span><br><span class="line"></span><br><span class="line">* 提取特征点</span><br><span class="line">points_foerstner (Image1, 1, 2, 3, 50, 0.1, &#x27;gauss&#x27;, &#x27;true&#x27;, Rows1, Columns1, CoRRJunctions, CoRCJunctions, CoCCJunctions, RowArea, ColumnArea, CoRRArea, CoRCArea, CoCCArea)</span><br><span class="line">points_foerstner (Image2, 1, 2, 3, 50, 0.1, &#x27;gauss&#x27;, &#x27;true&#x27;, Rows2, Columns2, CoRRJunctions, CoRCJunctions, CoCCJunctions, RowArea, ColumnArea, CoRRArea,  CoRCArea, CoCCArea)</span><br><span class="line"></span><br><span class="line">* 不考虑径向畸变的投影匹配</span><br><span class="line">proj_match_points_ransac (Image1, Image2, Rows1, Columns1, Rows2, Columns2, &#x27;ncc&#x27;, 10, 0, 0, Height, Width, 0, 0.5, &#x27;gold_standard&#x27;, 2, 42, HomMat2DUnrectified, Points1Unrectified, Points2Unrectified)</span><br><span class="line"></span><br><span class="line">* 拼接图像 </span><br><span class="line">concat_obj (Image1, Image2, Images)</span><br><span class="line">gen_projective_mosaic (Images, MosaicImageUnrectified, 1, 1, 2, HomMat2DUnrectified, &#x27;default&#x27;, &#x27;false&#x27;, MosaicMatrices2DUnrectified)</span><br><span class="line"></span><br><span class="line">* 考虑径向畸变的投影匹配</span><br><span class="line">proj_match_points_distortion_ransac (Image1, Image2, Rows1, Columns1, Rows2, Columns2, &#x27;ncc&#x27;, 10, 0, 0, Height, Width, 0, 0.5, &#x27;gold_standard&#x27;, 1, 42, HomMat2D, Kappa, Error, Points1, Points2)</span><br><span class="line"></span><br><span class="line">* 用于去除径向畸变的相机参数</span><br><span class="line">gen_cam_par_area_scan_telecentric_division (1.0, Kappa, 1.0, 1.0, 0.5 * (Width - 1), 0.5 * (Height - 1), Width, Height, CamParDist)</span><br><span class="line"></span><br><span class="line">* 去除图像中的径向畸变</span><br><span class="line">change_radial_distortion_cam_par (&#x27;fixed&#x27;, CamParDist, 0, CamPar)</span><br><span class="line">change_radial_distortion_image (Image1, Image1, Image1Rect, CamParDist, CamPar)</span><br><span class="line">change_radial_distortion_image (Image2, Image2, Image2Rect, CamParDist, CamPar)</span><br><span class="line"></span><br><span class="line">* 拼接图像</span><br><span class="line">concat_obj (Image1Rect, Image2Rect, ImagesRect)</span><br><span class="line">gen_projective_mosaic (ImagesRect, MosaicImage, 1, 1, 2, HomMat2D, &#x27;default&#x27;, &#x27;false&#x27;, MosaicMatrices2D)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* dev_open_window_fit_image (MosaicImage, 0, 0, -1, -1, WindowHandle)</span><br><span class="line">* dev_display (MosaicImageUnrectified)</span><br><span class="line">* dev_display (MosaicImage) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法，图像拼接 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halcon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP客户端</title>
      <link href="/2024/10/28/TCP%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2024/10/28/TCP%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：建立TCP客户端，从服务器接收数据</strong><br><em>THIK</em>：no~</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">* 参数设置</span><br><span class="line">Protocol := &#x27;TCP4&#x27;</span><br><span class="line">Timeout := 60</span><br><span class="line"></span><br><span class="line">* 打开SOCKET 仅用于接连接服务端，需指定IP和端口</span><br><span class="line">open_socket_connect (&#x27;192.168.0.10&#x27;, 10, [&#x27;protocol&#x27;,&#x27;timeout&#x27;], [Protocol,Timeout], Socket)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 接受数据</span><br><span class="line">s4 := &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">while (s4 != &#x27;END&#x27;)</span><br><span class="line">    Format := &#x27;z&#x27;</span><br><span class="line">    receive_data (Socket, Format, s1, From)</span><br><span class="line">    receive_data (Socket, Format, s2, From)</span><br><span class="line">    receive_data (Socket, Format, s3, From)</span><br><span class="line">    receive_data (Socket, Format, s4, From)</span><br><span class="line">endwhile</span><br><span class="line"></span><br><span class="line">close_socket (Socket)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> 通讯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tiff转png</title>
      <link href="/2024/10/28/tiff%E8%BD%ACpng/"/>
      <url>/2024/10/28/tiff%E8%BD%ACpng/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：tiff转png。</strong><br><em>THIK</em>：图像的通道数视实际情况而定</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">read_image (Image, &#x27;C:/Users/19901/Desktop/DemoPic/HK-2D-1.tiff&#x27;)</span><br><span class="line"></span><br><span class="line">access_channel (Image, Image1, 1)</span><br><span class="line">access_channel (Image, Image2, 2)</span><br><span class="line"></span><br><span class="line">* write_image (Image1, &#x27;png&#x27;, 0, &#x27;C:/Users/19901/Desktop/Height_0&#x27;)</span><br><span class="line">write_image (Image2, &#x27;png&#x27;, 0, &#x27;C:/Users/19901/Desktop/Gray_0&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> 图像格式转换 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一维码识别</title>
      <link href="/2024/10/28/%E4%B8%80%E7%BB%B4%E7%A0%81%E8%AF%86%E5%88%AB/"/>
      <url>/2024/10/28/%E4%B8%80%E7%BB%B4%E7%A0%81%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：检测并识别一维码。</strong><br><em>THIK</em>：支持的一维码类型有：【 ‘2&#x2F;5 Industrial’, ‘2&#x2F;5 Interleaved’, ‘Codabar’, ‘Code 128’, ‘Code 39’, ‘Code 93’, ‘EAN-13 Add-On 2’, ‘EAN-13 Add-On 5’, ‘EAN-13’, ‘EAN-8 Add-On 2’, ‘EAN-8 Add-On 5’, ‘EAN-8’, ‘GS1 DataBar Expanded Stacked’, ‘GS1 DataBar Expanded’, ‘GS1 DataBar Limited’, ‘GS1 DataBar Omnidir’, ‘GS1 DataBar Stacked Omnidir’, ‘GS1 DataBar Stacked’, ‘GS1 DataBar Truncated’, ‘GS1-128’, ‘MSI’, ‘PharmaCode’, ‘UPC-A Add-On 2’, ‘UPC-A Add-On 5’, ‘UPC-A’, ‘UPC-E Add-On 2’, ‘UPC-E Add-On 5’, ‘UPC-E’, ‘auto’】</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">read_image (Image, &#x27;barcode/code128/code12801&#x27;)</span><br><span class="line"></span><br><span class="line">dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</span><br><span class="line">set_display_font (WindowHandle, 16, &#x27;mono&#x27;, &#x27;true&#x27;, &#x27;false&#x27;)</span><br><span class="line">dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">dev_set_line_width (3)</span><br><span class="line"></span><br><span class="line">create_bar_code_model ([], [], BarCodeHandle)</span><br><span class="line">find_bar_code (Image, SymbolRegions, BarCodeHandle, &#x27;auto&#x27;, DecodedDataStrings)</span><br><span class="line">* get_bar_code_result (BarCodeHandle, &#x27;all&#x27;, &#x27;decoded_types&#x27;, BarCodeResults)</span><br><span class="line"></span><br><span class="line">dev_clear_window ()</span><br><span class="line">dev_display (Image)</span><br><span class="line">dev_display (SymbolRegions)</span><br><span class="line">disp_message (WindowHandle, DecodedDataStrings, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法，一维码识别 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>卡尺工具检测圆</title>
      <link href="/2024/10/28/%E5%8D%A1%E5%B0%BA%E5%B7%A5%E5%85%B7%E6%A3%80%E6%B5%8B%E5%9C%86/"/>
      <url>/2024/10/28/%E5%8D%A1%E5%B0%BA%E5%B7%A5%E5%85%B7%E6%A3%80%E6%B5%8B%E5%9C%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：卡尺工具检测圆。</strong><br><em>THIK</em>：检测圆的方法，还有基础的二值化+Blob。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">list_files (&#x27;C:/Users/19901/Desktop/JnsWhite/图像/2024-10-16&#x27;, &#x27;files&#x27;, Files)</span><br><span class="line">tuple_length (Files, Length)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for Index := 0 to 21 by 1</span><br><span class="line">    read_image (Image, Files[Index])</span><br><span class="line">    access_channel (Image, Image, 2)</span><br><span class="line">    get_image_size (Image, Width, Height)</span><br><span class="line">    </span><br><span class="line">    dev_close_window ()</span><br><span class="line">    dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</span><br><span class="line">    set_display_font (WindowHandle, 14, &#x27;mono&#x27;, &#x27;true&#x27;, &#x27;false&#x27;)</span><br><span class="line">    </span><br><span class="line">    * 圆环坐标</span><br><span class="line">    CircleInitRow := [540, 1520, 540, 1520]</span><br><span class="line">    CircleInitColumn := [1040, 1040, 1675, 1675]</span><br><span class="line">    gen_cross_contour_xld (Cross1, CircleInitRow, CircleInitColumn, 6, 0.785398)</span><br><span class="line">    CircleInitRadius := [gen_tuple_const(4, 105)]</span><br><span class="line">    CircleRadiusTolerance := 30</span><br><span class="line">    </span><br><span class="line">    * 测量模型</span><br><span class="line">    create_metrology_model (MetrologyHandle)</span><br><span class="line">    set_metrology_model_image_size (MetrologyHandle, Width, Height)</span><br><span class="line">    </span><br><span class="line">    add_metrology_object_circle_measure (MetrologyHandle, CircleInitRow, CircleInitColumn, CircleInitRadius, CircleRadiusTolerance, 5, 1, 8, [], [], MetrologyCircleIndices)</span><br><span class="line">    </span><br><span class="line">    * 最大数量、边缘极性、最小分数</span><br><span class="line">    set_metrology_object_param (MetrologyHandle, MetrologyCircleIndices, &#x27;num_instances&#x27;, 1)</span><br><span class="line"></span><br><span class="line">    set_metrology_object_param (MetrologyHandle, MetrologyCircleIndices, &#x27;measure_transition&#x27;, &#x27;negative&#x27;)</span><br><span class="line">    set_metrology_object_param (MetrologyHandle, MetrologyCircleIndices, &#x27;min_score&#x27;, .5)</span><br><span class="line">    apply_metrology_model (Image, MetrologyHandle)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    get_metrology_object_result (MetrologyHandle, MetrologyCircleIndices, &#x27;all&#x27;, &#x27;result_type&#x27;, &#x27;all_param&#x27;, CircleParameter)</span><br><span class="line">    Sequence := [0:3:|CircleParameter| - 1]</span><br><span class="line">    CircleRow := CircleParameter[Sequence]</span><br><span class="line">    CircleColumn := CircleParameter[Sequence + 1]</span><br><span class="line">    CircleRadius := CircleParameter[Sequence + 2]</span><br><span class="line">    </span><br><span class="line">    get_metrology_object_result_contour (Contours, MetrologyHandle, &#x27;all&#x27;, &#x27;all&#x27;, 1.5)</span><br><span class="line">    get_metrology_object_measures (Contour, MetrologyHandle, &#x27;all&#x27;, &#x27;all&#x27;, Row1, Column1)</span><br><span class="line">    gen_cross_contour_xld (Cross, Row1, Column1, 6, 0.785398)</span><br><span class="line">    </span><br><span class="line">    dev_display (Image)</span><br><span class="line">    dev_set_line_width (1)</span><br><span class="line">    dev_display (Contour)</span><br><span class="line">    dev_display (Cross)</span><br><span class="line">    dev_set_line_width (2)</span><br><span class="line">    dev_display (Contours)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    * 数据存储</span><br><span class="line">    open_file (&#x27;C:/Users/19901/Desktop/CircleRadius.csv&#x27;, &#x27;append&#x27;, FileHandle)</span><br><span class="line">    </span><br><span class="line">    NumCircles := |CircleRadius| </span><br><span class="line">    for i := 0 to NumCircles-1 by 1</span><br><span class="line">        CircleRadiusScaled := CircleRadius[i] * 0.0125 * 2</span><br><span class="line">        CircleRadiusRounded := number(CircleRadiusScaled$&#x27;.3f&#x27;)</span><br><span class="line">        fwrite_string (FileHandle, CircleRadiusRounded + &#x27;, &#x27;)</span><br><span class="line">    endfor</span><br><span class="line">    fwrite_string (FileHandle, &#x27;\n&#x27;)</span><br><span class="line">    close_file(FileHandle)</span><br><span class="line"></span><br><span class="line">endfor</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> 圆检测 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>条状纹理上划痕检测</title>
      <link href="/2024/10/28/%E6%9D%A1%E7%8A%B6%E7%BA%B9%E7%90%86%E4%B8%8A%E5%88%92%E7%97%95%E6%A3%80%E6%B5%8B/"/>
      <url>/2024/10/28/%E6%9D%A1%E7%8A%B6%E7%BA%B9%E7%90%86%E4%B8%8A%E5%88%92%E7%97%95%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：条状纹理上划痕检测，使用FFT+Gauss进行预处理</strong><br><em>THIK</em>：对于图像的预处理方法很巧妙，gray_range_rect可以突出缺陷</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">* 读取图像和转换为灰度图像</span><br><span class="line">read_image (Image, &#x27;C:/Users/19901/Desktop/DemoPic/Scar2.png&#x27;)</span><br><span class="line">get_image_size (Image, Width, Height)</span><br><span class="line">rgb1_to_gray (Image, GrayImage)</span><br><span class="line"></span><br><span class="line">* FFT+gauss</span><br><span class="line">optimize_rft_speed (Width, Height, &#x27;standard&#x27;)</span><br><span class="line">Sigma1 := 10.0</span><br><span class="line">Sigma2 := 3.0</span><br><span class="line">gen_gauss_filter (GaussFilter1, Sigma1, Sigma1, 0.0, &#x27;none&#x27;, &#x27;rft&#x27;, Width, Height)</span><br><span class="line">gen_gauss_filter (GaussFilter2, Sigma2, Sigma2, 0.0, &#x27;none&#x27;, &#x27;rft&#x27;, Width, Height)</span><br><span class="line">sub_image (GaussFilter1, GaussFilter2, Filter, 1, 0)</span><br><span class="line"></span><br><span class="line">rft_generic (Image, ImageFFT, &#x27;to_freq&#x27;, &#x27;none&#x27;, &#x27;complex&#x27;, Width)</span><br><span class="line">convol_fft (ImageFFT, Filter, ImageConvol)</span><br><span class="line">rft_generic (ImageConvol, ImageFiltered, &#x27;from_freq&#x27;, &#x27;n&#x27;, &#x27;real&#x27;, Width)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 预处理</span><br><span class="line">gray_range_rect (ImageFiltered, ImageResult, 3, 3)</span><br><span class="line">min_max_gray (ImageResult, ImageResult, 0, Min, Max, Range)</span><br><span class="line">threshold (ImageResult, RegionDynThresh, 10, 255)</span><br><span class="line"></span><br><span class="line">* 划痕检测</span><br><span class="line">connection (RegionDynThresh, ConnectedRegions)</span><br><span class="line">select_shape (ConnectedRegions, SelectedRegions, &#x27;area&#x27;, &#x27;and&#x27;, 4, 99999)</span><br><span class="line">union1 (SelectedRegions, RegionUnion)</span><br><span class="line">closing_circle (RegionUnion, RegionClosing, 3)  </span><br><span class="line">erosion_circle (RegionClosing, RegionEroded, 3)  </span><br><span class="line">connection (RegionEroded, ConnectedRegions1)</span><br><span class="line">select_shape (ConnectedRegions1, SelectedRegions1, &#x27;area&#x27;, &#x27;and&#x27;, 10, 99999)</span><br><span class="line">area_center (SelectedRegions1, Area, Row, Column)</span><br><span class="line"></span><br><span class="line">dev_clear_window ()</span><br><span class="line">dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</span><br><span class="line">dev_display (Image)</span><br><span class="line">dev_display (SelectedRegions1)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> 划痕检测 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>圆形划痕检测</title>
      <link href="/2024/10/28/%E5%9C%86%E5%BD%A2%E5%88%92%E7%97%95%E6%A3%80%E6%B5%8B/"/>
      <url>/2024/10/28/%E5%9C%86%E5%BD%A2%E5%88%92%E7%97%95%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：小圆孔形划痕检测，使用FFT+Gauss进行预处理</strong><br><em>THIK</em>：对于微小或者不明显的划痕，FFT往往很有效</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">dev_update_off ()</span><br><span class="line">dev_close_window ()</span><br><span class="line">read_image (Image, &#x27;plastics/plastics_01&#x27;)</span><br><span class="line">get_image_size (Image, Width, Height)</span><br><span class="line">dev_open_window (0, 0, Width, Height, &#x27;black&#x27;, WindowHandle)</span><br><span class="line">set_display_font (WindowHandle, 14, &#x27;mono&#x27;, &#x27;true&#x27;, &#x27;false&#x27;)</span><br><span class="line">dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">dev_set_line_width (3)</span><br><span class="line">dev_set_color (&#x27;red&#x27;)</span><br><span class="line"></span><br><span class="line">* 优化FFT速度</span><br><span class="line">optimize_rft_speed (Width, Height, &#x27;standard&#x27;)</span><br><span class="line"></span><br><span class="line">* 构建滤波器</span><br><span class="line">Sigma1 := 10.0</span><br><span class="line">Sigma2 := 3.0</span><br><span class="line">gen_gauss_filter (GaussFilter1, Sigma1, Sigma1, 0.0, &#x27;none&#x27;, &#x27;rft&#x27;, Width, Height)</span><br><span class="line">gen_gauss_filter (GaussFilter2, Sigma2, Sigma2, 0.0, &#x27;none&#x27;, &#x27;rft&#x27;, Width, Height)</span><br><span class="line">sub_image (GaussFilter1, GaussFilter2, Filter, 1, 0)</span><br><span class="line"></span><br><span class="line">* 处理图像</span><br><span class="line">NumImages := 11</span><br><span class="line">for Index := 1 to NumImages by 1</span><br><span class="line">    read_image (Image, &#x27;plastics/plastics_&#x27; + Index$&#x27;02&#x27;)</span><br><span class="line">    rgb1_to_gray (Image, Image)</span><br><span class="line"></span><br><span class="line">    * 频域卷积</span><br><span class="line">    rft_generic (Image, ImageFFT, &#x27;to_freq&#x27;, &#x27;none&#x27;, &#x27;complex&#x27;, Width)</span><br><span class="line">    convol_fft (ImageFFT, Filter, ImageConvol)</span><br><span class="line">    rft_generic (ImageConvol, ImageFiltered, &#x27;from_freq&#x27;, &#x27;n&#x27;, &#x27;real&#x27;, Width)</span><br><span class="line"></span><br><span class="line">    * 图像处理</span><br><span class="line">    gray_range_rect (ImageFiltered, ImageResult, 10, 10)</span><br><span class="line">    min_max_gray (ImageResult, ImageResult, 0, Min, Max, Range)</span><br><span class="line">    threshold (ImageResult, RegionDynThresh, max([5.55,Max * 0.8]), 255)</span><br><span class="line">    connection (RegionDynThresh, ConnectedRegions)</span><br><span class="line">    select_shape (ConnectedRegions, SelectedRegions, &#x27;area&#x27;, &#x27;and&#x27;, 4, 99999)</span><br><span class="line">    union1 (SelectedRegions, RegionUnion)</span><br><span class="line">    closing_circle (RegionUnion, RegionClosing, 10)</span><br><span class="line">    connection (RegionClosing, ConnectedRegions1)</span><br><span class="line">    select_shape (ConnectedRegions1, SelectedRegions1, &#x27;area&#x27;, &#x27;and&#x27;, 10, 99999)</span><br><span class="line">    area_center (SelectedRegions1, Area, Row, Column)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    dev_display (Image)</span><br><span class="line">    Number := |Area|</span><br><span class="line">    if (Number &gt; 0)</span><br><span class="line">        gen_circle_contour_xld (ContCircle, Row, Column, gen_tuple_const(Number, 30), gen_tuple_const(Number, 0), gen_tuple_const(Number, rad(360)), &#x27;positive&#x27;, 1)</span><br><span class="line">        ResultMessage := [Number + &#x27; defect(s) found&#x27;]</span><br><span class="line">        Color := &#x27;red&#x27;</span><br><span class="line">        dev_display (ContCircle)</span><br><span class="line">    else</span><br><span class="line">        ResultMessage := &#x27;OK&#x27;</span><br><span class="line">        Color := &#x27;forest green&#x27;</span><br><span class="line">    endif</span><br><span class="line">    disp_message (WindowHandle, ResultMessage, &#x27;window&#x27;, 12, 12, Color, &#x27;true&#x27;)</span><br><span class="line">    if (Index != NumImages)</span><br><span class="line">        disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">        stop ()</span><br><span class="line">    endif</span><br><span class="line">endfor</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> 划痕检测 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>条状纹理上划痕检测</title>
      <link href="/2024/10/28/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/"/>
      <url>/2024/10/28/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：边缘检测，使用FFT+Gauss进行预处理</strong><br><em>THIK</em>：边缘检测的大体流程就是这样，出于保密原因所以没给图</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">get_image_size(Image, Width, Height)</span><br><span class="line">gen_rectangle2 (ROI_0, 1875.79, 1389.2, rad(-86.348), 1165.25, 456.347)</span><br><span class="line"></span><br><span class="line">* FFT+gauss</span><br><span class="line">optimize_rft_speed (Width, Height, &#x27;standard&#x27;)</span><br><span class="line"></span><br><span class="line">Sigma1 := 20</span><br><span class="line">Sigma2 := 3</span><br><span class="line">gen_gauss_filter (GaussFilter1, Sigma1, Sigma1, 0.0, &#x27;none&#x27;, &#x27;rft&#x27;, Width, Height)</span><br><span class="line">gen_gauss_filter (GaussFilter2, Sigma2, Sigma2, 0.0, &#x27;none&#x27;, &#x27;rft&#x27;, Width, Height)</span><br><span class="line">sub_image (GaussFilter1, GaussFilter2, Filter, 1, 0)</span><br><span class="line"></span><br><span class="line">rft_generic (Image, ImageFFT, &#x27;to_freq&#x27;, &#x27;none&#x27;, &#x27;complex&#x27;, Width)</span><br><span class="line">convol_fft (ImageFFT, Filter, ImageConvol)</span><br><span class="line">rft_generic (ImageConvol, ImageFiltered, &#x27;from_freq&#x27;, &#x27;n&#x27;, &#x27;real&#x27;, Width)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 边缘检测</span><br><span class="line">reduce_domain (ImageFiltered, ROI_0, ImageReduced)</span><br><span class="line">edges_sub_pix (ImageReduced, Edges, &#x27;canny&#x27;, 10, 10, 35)</span><br><span class="line"></span><br><span class="line">* 筛选边缘</span><br><span class="line">smooth_contours_xld (Edges, SmoothedContours1, 511)</span><br><span class="line">select_contours_xld (SmoothedContours1, SelectedContours1, &#x27;contour_length&#x27;, 100, 2000000, -0.5, 0.5)</span><br><span class="line">union_adjacent_contours_xld (SelectedContours1, UnionContours1, 100, 1, &#x27;attr_keep&#x27;)</span><br><span class="line">select_contours_xld (UnionContours1, SelectedContours, &#x27;contour_length&#x27;, 1000, 2000000, 0, 0)</span><br><span class="line"></span><br><span class="line">union_adjacent_contours_xld (SelectedContours, UnionContours, 400, 0.1, &#x27;attr_keep&#x27;)</span><br><span class="line"></span><br><span class="line">dev_clear_window()</span><br><span class="line">dev_display (Image)</span><br><span class="line">dev_display (SelectedContours)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> 边缘检测 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>长条型划痕检测</title>
      <link href="/2024/10/28/%E9%95%BF%E6%9D%A1%E5%9E%8B%E5%88%92%E7%97%95%E6%A3%80%E6%B5%8B/"/>
      <url>/2024/10/28/%E9%95%BF%E6%9D%A1%E5%9E%8B%E5%88%92%E7%97%95%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：长条型划痕检测。</strong><br><em>THIK</em>：基础方法实现的划痕检测，还是通过灰度值不同来检测的。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">dev_update_off ()</span><br><span class="line">dev_close_window ()</span><br><span class="line"></span><br><span class="line">read_image (Image, &#x27;surface_scratch&#x27;)</span><br><span class="line">get_image_size (Image, Width, Height)</span><br><span class="line"></span><br><span class="line">* 预处理</span><br><span class="line">mean_image (Image, ImageMean, 7, 7)</span><br><span class="line">dyn_threshold (Image, ImageMean, DarkPixels, 5, &#x27;dark&#x27;)</span><br><span class="line"></span><br><span class="line">* 分离 + 筛选区域</span><br><span class="line">connection (DarkPixels, ConnectedRegions)</span><br><span class="line">select_shape (ConnectedRegions, SelectedRegions, &#x27;area&#x27;, &#x27;and&#x27;, 10, 1000)</span><br><span class="line"></span><br><span class="line">* 合并划痕 + 提取骨架 + 分割</span><br><span class="line">union1 (SelectedRegions, RegionUnion)</span><br><span class="line">dilation_circle (RegionUnion, RegionDilation, 4)</span><br><span class="line">skeleton (RegionDilation, Skeleton)</span><br><span class="line">connection (Skeleton, Errors)</span><br><span class="line"></span><br><span class="line">select_shape (Errors, Scratches, &#x27;area&#x27;, &#x27;and&#x27;, 50, 10000)</span><br><span class="line">select_shape (Errors, Dots, &#x27;area&#x27;, &#x27;and&#x27;, 1, 50)</span><br><span class="line"></span><br><span class="line">dev_open_window_fit_image (Image, 0, 0, Width, Height, WindowID)</span><br><span class="line">dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">dev_set_line_width (3)</span><br><span class="line">dev_display (Image)</span><br><span class="line">dev_set_color (&#x27;red&#x27;)</span><br><span class="line">dev_display (Scratches)</span><br><span class="line">dev_set_color (&#x27;blue&#x27;)</span><br><span class="line">dev_display (Dots)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> 划痕检测 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二维码识别</title>
      <link href="/2024/10/25/%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%AF%86%E5%88%AB/"/>
      <url>/2024/10/25/%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：检测并识别二维码。</strong><br><em>THIK</em>：支持的二维码类型有：【 ‘Aztec Code’, ‘Data Matrix ECC 200’, ‘DotCode’, ‘GS1 Aztec Code’, ‘GS1 DataMatrix’, ‘GS1 DotCode’, ‘GS1 QR Code’, ‘Micro QR Code’, ‘PDF417’, ‘QR Code’】</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read_image (Image, &#x27;C:/Users/19901/Desktop/DemoPic/qr1.png&#x27;)</span><br><span class="line">* 给定二维码类型并创建句柄</span><br><span class="line">create_data_code_2d_model (&#x27;QR Code&#x27;, [], [], DataCodeHandle)</span><br><span class="line">* 检测并识别，结果字符串为DecodedDataStrings</span><br><span class="line">find_data_code_2d (Image, SymbolXLDs, DataCodeHandle, [], [], ResultHandles, DecodedDataStrings)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法，二维码识别 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>board.hdev</title>
      <link href="/2024/10/24/board.hdev/"/>
      <url>/2024/10/24/board.hdev/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：检测焊料缺失的位置和数量。</strong><br><em>THIK</em>：这个完整区域是由多张图像拼成的，实际应用中最好有真正完整的模板图像。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">* 启用区域剪裁</span><br><span class="line">get_system (&#x27;clip_region&#x27;, Information)</span><br><span class="line">set_system (&#x27;clip_region&#x27;, &#x27;true&#x27;)</span><br><span class="line"></span><br><span class="line">* 读取图像并合并</span><br><span class="line">read_image (Images, [&#x27;ic0&#x27;, &#x27;ic1&#x27;, &#x27;ic2&#x27;, &#x27;ic3&#x27;])</span><br><span class="line">channels_to_image (Images, Ic)</span><br><span class="line">select_obj (Images, Input1, 1)</span><br><span class="line">select_obj (Images, Input2, 2)</span><br><span class="line">select_obj (Images, Input3, 3)</span><br><span class="line">select_obj (Images, Input4, 4)</span><br><span class="line"></span><br><span class="line">* 对图像进行处理，检测暗区域（潜在的焊料缺失位置）</span><br><span class="line">mean_n (Ic, ImageMean)</span><br><span class="line">threshold (Images, Darks, 0, 40)</span><br><span class="line">union1 (Darks, Dark)</span><br><span class="line">fill_up (Dark, DarkFilled)</span><br><span class="line">* 检测亮区域</span><br><span class="line">threshold (Images, Lights, 100, 255)</span><br><span class="line">union1 (Lights, Light)</span><br><span class="line"></span><br><span class="line">* 计算暗区域和亮区域的交集</span><br><span class="line">intersection (DarkFilled, Light, Intersection)</span><br><span class="line"></span><br><span class="line">* 计算暗区域的补集，生成背景区域</span><br><span class="line">complement (DarkFilled, Back)</span><br><span class="line">* 扩展交集区域</span><br><span class="line">expand_region (Intersection, Back, RegionExpanded, 10, &#x27;image&#x27;)</span><br><span class="line">* 填充扩展区域，生成良好的区域</span><br><span class="line">fill_up (RegionExpanded, Good)</span><br><span class="line"></span><br><span class="line">* 计算缺失焊料的区域</span><br><span class="line">difference (DarkFilled, Good, Rest)</span><br><span class="line">* 根据图像IC的灰度信息扩展缺失焊料区域Rest为Bad</span><br><span class="line">* expand_gray（Region, Image, ForbiddenRegion, RegionExpanded, Iterations, Mode, Threshold）</span><br><span class="line">expand_gray (Rest, Ic, Good, Bad, 6, &#x27;image&#x27;, 5)</span><br><span class="line"></span><br><span class="line">* 筛选区域，统计面积和中心坐标</span><br><span class="line">connection (Bad, ConnectedBad)</span><br><span class="line">select_shape (ConnectedBad, BigBad, &#x27;area&#x27;, &#x27;and&#x27;, 150, 99999)</span><br><span class="line">area_center (BigBad, AreaBad, Row, Column)</span><br><span class="line">count_obj (BigBad, NumMissingSolder)</span><br><span class="line">AreaMissingSolder := sum(AreaBad)</span><br><span class="line"></span><br><span class="line">* 恢复区域剪裁设置</span><br><span class="line">set_system (&#x27;clip_region&#x27;, Information)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> Halcon示例程序 </category>
          
          <category> Blob分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hough_lines.hdev</title>
      <link href="/2024/10/24/hough_lines.hdev/"/>
      <url>/2024/10/24/hough_lines.hdev/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：霍夫变换检测直线</strong>。实际是先检测边缘，再用hough拟合直线<br><em>THIK</em>：Sobel检测边缘的精度似乎比edge_sub_mix检测边缘低，霍夫变换比普通的直线拟合有优势吗？使用sobel_dir和hough_lines_dir还可以检测直线的方向。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* 读取图像，设置ROI</span><br><span class="line">read_image (Image, &#x27;fabrik&#x27;)</span><br><span class="line">rectangle1_domain (Image, ImageReduced, 230, 180, 330, 280)</span><br><span class="line">* 使用Sobel算子检测边缘</span><br><span class="line">sobel_amp (ImageReduced, EdgeAmplitude, &#x27;thin_sum_abs&#x27;, 3)</span><br><span class="line">dev_set_color (&#x27;red&#x27;)</span><br><span class="line">threshold (EdgeAmplitude, Region, 10, 255)</span><br><span class="line">* 霍夫变换，将从Region中检测到的边缘线转化为霍夫空间的直线表示</span><br><span class="line">hough_lines (Region, 4, 50, 5, 5, Angle, Dist)</span><br><span class="line"></span><br><span class="line">dev_set_color (&#x27;blue&#x27;)</span><br><span class="line">gen_region_hline (Regions, Angle, Dist)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon </category>
          
          <category> Halcon示例程序 </category>
          
          <category> Halcon方法，Hough变换 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>光度立体法检测缺陷</title>
      <link href="/2024/10/22/%E5%85%89%E5%BA%A6%E7%AB%8B%E4%BD%93%E6%B3%95/"/>
      <url>/2024/10/22/%E5%85%89%E5%BA%A6%E7%AB%8B%E4%BD%93%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：光度立体法主要应用于物体表面瑕疵检测以及三维重建</strong>。本文主要讲述它在表面检测领域的应用。</p></blockquote><p>对于物体表面的微小瑕疵，从不同角度打光，成像效果自然有好有坏。光度立体法基于多种角度打光的图像，计算图像的梯度</p><ol><li><p>初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dev_close_window ()</span><br><span class="line">dev_update_off ()</span><br><span class="line">dev_open_window (0, 0, 640, 512, &#x27;black&#x27;, WindowHandle)</span><br><span class="line">set_display_font (WindowHandle, 14, &#x27;mono&#x27;, &#x27;true&#x27;, &#x27;false&#x27;)</span><br><span class="line">Message := &#x27;Inspect the label of flooring panels&#x27;</span><br><span class="line">Message[1] := &#x27;using photometric stereo. In this case four&#x27;</span><br><span class="line">Message[2] := &#x27;different light orientations were used.&#x27;</span><br><span class="line">disp_message (WindowHandle, Message, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">stop ()</span><br></pre></td></tr></table></figure></li><li><p>使用光度立体法得到曲率图，检测缺陷</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">for Index := 1 to 2 by 1</span><br><span class="line">    * 不同角度打光的图像</span><br><span class="line">    read_image (Images, &#x27;photometric_stereo/flooring_&#x27; + Index + &#x27;_0&#x27; + [1:4])</span><br><span class="line">    for I := 1 to 4 by 1</span><br><span class="line">        Message := &#x27;Acquire image &#x27; + I + &#x27; of 4&#x27;</span><br><span class="line">        select_obj (Images, ObjectSelected, I)</span><br><span class="line">        dev_display (ObjectSelected)</span><br><span class="line">        disp_message (WindowHandle, Message, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">        wait_seconds (0.5)</span><br><span class="line">    endfor</span><br><span class="line">    </span><br><span class="line">    * 光照倾斜角度和光照旋转角度</span><br><span class="line">    Slants := [39.4, 40.5, 39.5, 38.4]</span><br><span class="line">    Tilts := [-6.0, 83.7, 172.9, -98.2]</span><br><span class="line">    * 计算结果，表面梯度和反照率</span><br><span class="line">    ResultType := [&#x27;gradient&#x27;, &#x27;albedo&#x27;]</span><br><span class="line">    * 光度立体法</span><br><span class="line">    photometric_stereo (Images, HeightField, Gradient, Albedo, Slants, Tilts, ResultType, &#x27;poisson&#x27;, [], [])</span><br><span class="line">   </span><br><span class="line">    dev_display (Albedo)</span><br><span class="line">    disp_message (WindowHandle, &#x27;Albedo image&#x27;, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    stop ()</span><br><span class="line">    </span><br><span class="line">    * 计算表面的高斯曲率，输入为梯度场，输出为均值曲率图像。</span><br><span class="line">    derivate_vector_field (Gradient, MeanCurvature, 1.0, &#x27;mean_curvature&#x27;)</span><br><span class="line">    </span><br><span class="line">    * 在均值曲率图像上检测缺陷</span><br><span class="line">    threshold (MeanCurvature, Region, 0.02, 1000)</span><br><span class="line">    connection (Region, Defects)</span><br><span class="line">    area_center (Defects, Area, Row, Column)</span><br><span class="line">    gen_circle (Circle, Row, Column, sqrt(Area) + 10)</span><br><span class="line">    </span><br><span class="line">    dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">    dev_set_color (&#x27;red&#x27;)</span><br><span class="line">    dev_set_line_width (2)</span><br><span class="line">    dev_display (MeanCurvature)</span><br><span class="line">    dev_display (Circle)</span><br><span class="line">    Message := &#x27;The defects can easily be detected&#x27;</span><br><span class="line">    Message[1] := &#x27;in the surface curvature image&#x27;</span><br><span class="line">    disp_message (WindowHandle, Message, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    stop ()</span><br><span class="line">    </span><br><span class="line">    dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">    dev_set_color (&#x27;red&#x27;)</span><br><span class="line">    dev_display (Albedo)</span><br><span class="line">    dev_display (Circle)</span><br><span class="line">    disp_message (WindowHandle, &#x27;Defects in albedo image&#x27;, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    if (Index &lt; 2)</span><br><span class="line">        disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">        stop ()</span><br><span class="line">    endif</span><br><span class="line">endfor</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Halcon方法，光度立体法 </category>
          
          <category> Halcon方法，缺陷检测 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>相机标定.hdev</title>
      <link href="/2024/10/22/%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/"/>
      <url>/2024/10/22/%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>TODO</p>]]></content>
      
      
      <categories>
          
          <category> Halcon方法，相机标定 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2D/3D手眼标定——9点标定.hdev</title>
      <link href="/2024/10/21/2D%E6%88%963D%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A-9%E7%82%B9%E6%A0%87%E5%AE%9A/"/>
      <url>/2024/10/21/2D%E6%88%963D%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A-9%E7%82%B9%E6%A0%87%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：手眼标定和相机标定是两个东西。<br>手眼标定，主要用来建立相机的像素坐标系和机械臂的世界坐标系之间的转换关系。<br>相机标定，主要用来矫正相机自身的透镜畸变</p></blockquote><p>手眼标定理论：<a href="https://blog.csdn.net/hao1183716597/article/details/136401554">参考博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">dev_update_off ()</span><br><span class="line"></span><br><span class="line">read_image (Image, &#x27;C:/Users/19901/Desktop/DemoPic/九点标定.jpeg&#x27;)</span><br><span class="line">rgb1_to_gray (Image, GrayImage)</span><br><span class="line"></span><br><span class="line">* 检测圆，以确定相机坐标系下的9点坐标</span><br><span class="line">threshold (GrayImage, Regions, 13, 71)</span><br><span class="line">fill_up_shape (Regions, WiresFilled, &#x27;area&#x27;, 1, 100)</span><br><span class="line"></span><br><span class="line">opening_circle (WiresFilled, Balls, 15.5)</span><br><span class="line">connection (Balls, SingleBalls)</span><br><span class="line">select_shape (SingleBalls, IntermediateBalls, &#x27;circularity&#x27;, &#x27;and&#x27;, 0.85, 1.0)</span><br><span class="line">smallest_circle (SingleBalls, Row, Column, Radius)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dev_clear_window ()</span><br><span class="line">dev_display (Image)</span><br><span class="line"></span><br><span class="line">* 生成虚拟机械坐标用以演示，实际应该为：确定的机械手坐标系下的行列坐标。</span><br><span class="line">WorldRow := []</span><br><span class="line">WorldCol :=[]</span><br><span class="line"></span><br><span class="line">for Index := 0 to |Row|-1 by 1</span><br><span class="line">    WorldRow[Index] := Row[Index] + 40</span><br><span class="line">    WorldCol[Index] := Column[Index] - 10</span><br><span class="line">    gen_circle (Circle, WorldRow[Index], WorldCol[Index], 10)</span><br><span class="line">    dev_set_color(&#x27;red&#x27;)</span><br><span class="line">    dev_display (Circle)</span><br><span class="line">endfor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 生成标定，计算变换矩阵HomMat2D，(从相机坐标系到机械手坐标系的转换)</span><br><span class="line">vector_to_hom_mat2d (Row, Column, WorldRow, WorldCol, HomMat2D)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 测试标定效果</span><br><span class="line">for Index := 0 to |Row|-1 by 1</span><br><span class="line">    r := WorldRow[Index]</span><br><span class="line">    c := WorldCol[Index]</span><br><span class="line">    </span><br><span class="line">    * 逆矩阵</span><br><span class="line">    hom_mat2d_invert(HomMat2D, HomMat2D_Inverted)</span><br><span class="line">    affine_trans_point_2d (HomMat2D_Inverted, r, c, Qx, Qy)</span><br><span class="line">    gen_circle (Circle, Qx, Qy, 10)</span><br><span class="line">    </span><br><span class="line">    dev_set_color(&#x27;green&#x27;)</span><br><span class="line">    dev_display (Circle)</span><br><span class="line">endfor</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> 手眼标定 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C&amp;#35;的实例化</title>
      <link href="/2024/10/11/C#%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96/"/>
      <url>/2024/10/11/C#%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 C# 中，<strong>类</strong>是一种抽象的模板，定义了对象的属性和行为，但不能直接使用。要使用类，必须通过 new 进行<strong>实例化</strong>，即在内存(堆)中创建类的具体实例，称为对象。</p></blockquote><p>new 操作符的作用是：<br>分配内存：在堆上为对象分配内存。<br>调用构造函数：初始化对象的属性和状态。<br>垃圾回收：C# 的对象由垃圾回收器（GC）管理，程序员不需要手动释放内存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Car</span><br><span class="line">&#123;</span><br><span class="line">    public string make;</span><br><span class="line">    public string model;</span><br><span class="line">    </span><br><span class="line">    // 构造函数</span><br><span class="line">    public Car(string make, string model)</span><br><span class="line">    &#123;</span><br><span class="line">        this.make = make;</span><br><span class="line">        this.model = model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 调用构造函数</span><br><span class="line">Car myCar = new Car(&quot;Toyota&quot;, &quot;Corolla&quot;);  </span><br></pre></td></tr></table></figure><blockquote><p>相比之下，C++ 可以直接在栈上创建对象而不需要 new，但如果在堆上创建对象（用 new），需要手动释放内存。因此，C# 更加依赖 new 来保证内存的自动管理和对象初始化。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> c# </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Halcon与C#联合编程</title>
      <link href="/2024/10/11/HALCON%E4%B8%8EC#%E8%81%94%E5%90%88%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/10/11/HALCON%E4%B8%8EC#%E8%81%94%E5%90%88%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Halcon版本：24.05<br>Visual Studio版本：2022</p></blockquote><hr><blockquote><p>主要有三种方式：</p><ol><li>导出 HALCON 工程并嵌入 C#，例如 WinFrom中。</li><li>使用 HalconDotNet，在 C#中调用 HALCON算子。</li><li>使用 HDevEngine，加载和执行 .hdev文件</li></ol></blockquote><hr><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>halcon做后端算法，c#做前端界面，界面可用WinFrom、WPF实现。这里以WinFrom为例。</p><ol><li><p>配置环境变量</p></li><li><p>移动文件halcondotnet.dll和halcon.dll，至WinFrom项目的Bin目录下</p></li><li><p>创建WinFrom，更改属性，“项目 —&gt; WindowsFromApp1和属性 —&gt; 生成 —&gt; 首选32位” ，取消勾选“首选32位”。</p></li><li><p>创建HWC和botton，修改基本属性</p></li><li><p>创建WinFrom后， “工具 —&gt; 选择工具箱 —&gt; 浏览” ，添加halcondotnet.dll</p></li><li><p>引用halcondotnet.dll，“右键引用 —&gt; 添加引用 —&gt; 浏览”</p></li><li><p>导出HALCON工程文件</p></li><li><p>导入WinFrom，“右键工程 —&gt; 添加 —&gt; 现有项 —&gt; .cs文件”</p></li><li><p>修改代码<br>在将 Halcon 代码导入到 WinForms 中的过程中，会生成一个名为 HDevelopExport 的类。这个类通常包含三个主要方法（如果 Halcon 程序中包含子程序，可能会生成多个方法）：<br>action：这是一个私有方法，可以看作是将 Halcon 代码直接翻译成 C# 代码。它包含了Halcon代码的具体实现。<br>InitHalcon：这是一个公有方法，通常用于初始化 Halcon 环境或设置。<br>RunHalcon：这是另一个公有方法，作为程序的入口点。它的主要作用是调用 action 方法，执行图像处理的逻辑。</p></li></ol><p>修改Botton组件代码</p><ol start="9"><li>运行WinFrom，“调试 —&gt; 开始执行（不调试）—&gt; 点击button”</li></ol>]]></content>
      
      
      <categories>
          
          <category> HALCON与c#联合编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ball.hdev</title>
      <link href="/2024/10/11/ball.hdev/"/>
      <url>/2024/10/11/ball.hdev/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：识别电路板上的黑色圆形焊点。</strong><br><em>THIK</em>：对于结果确定为圆形的对象，可以用Blob的最小外接圆作为最终结果。类似于适用XLD对象的fit_circle_contour_xld。</p></blockquote><ol><li>窗口和图像初始化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dev_update_window (&#x27;off&#x27;)</span><br><span class="line">dev_close_window ()</span><br><span class="line">dev_open_window (0, 0, 728, 512, &#x27;black&#x27;, WindowID)</span><br><span class="line">read_image (Bond, &#x27;die/die_03&#x27;)</span><br><span class="line">dev_display (Bond)</span><br><span class="line">set_display_font (WindowID, 14, &#x27;mono&#x27;, &#x27;true&#x27;, &#x27;false&#x27;)</span><br><span class="line">disp_continue_message (WindowID, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">stop ()</span><br></pre></td></tr></table></figure></li><li>图像预处理<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* 可以学习一下，某种意义上的自动生成ROI区域</span><br><span class="line">threshold (Bond, Bright, 100, 255)</span><br><span class="line">shape_trans (Bright, Die, &#x27;rectangle2&#x27;)</span><br><span class="line">dev_set_color (&#x27;green&#x27;)</span><br><span class="line">dev_set_line_width (3)</span><br><span class="line">dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">dev_display (Die)</span><br><span class="line">disp_continue_message (WindowID, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">stop ()</span><br><span class="line">* 进一步预处理，二值化并填充</span><br><span class="line">reduce_domain (Bond, Die, DieGrey)</span><br><span class="line">threshold (DieGrey, Wires, 0, 50)</span><br><span class="line">fill_up_shape (Wires, WiresFilled, &#x27;area&#x27;, 1, 100)</span><br><span class="line">dev_display (Bond)</span><br><span class="line">dev_set_draw (&#x27;fill&#x27;)</span><br><span class="line">dev_set_color (&#x27;red&#x27;)</span><br><span class="line">dev_display (WiresFilled)</span><br><span class="line">disp_continue_message (WindowID, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">stop ()</span><br></pre></td></tr></table></figure></li><li>检测圆形焊点<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">* 开运算消除细小噪声，保留较大的圆形区域</span><br><span class="line">opening_circle (WiresFilled, Balls, 15.5)</span><br><span class="line">dev_set_color (&#x27;green&#x27;)</span><br><span class="line">dev_display (Balls)</span><br><span class="line">disp_continue_message (WindowID, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">stop ()</span><br><span class="line">* 分割、根据圆度筛选、按照位置排序</span><br><span class="line">connection (Balls, SingleBalls)</span><br><span class="line">select_shape (SingleBalls, IntermediateBalls, &#x27;circularity&#x27;, &#x27;and&#x27;, 0.85, 1.0)</span><br><span class="line">sort_region (IntermediateBalls, FinalBalls, &#x27;first_point&#x27;, &#x27;true&#x27;, &#x27;column&#x27;)</span><br><span class="line">dev_display (Bond)</span><br><span class="line">dev_set_colored (12)</span><br><span class="line">dev_display (FinalBalls)</span><br><span class="line">disp_continue_message (WindowID, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">stop ()</span><br><span class="line">* 计算最小外接圆</span><br><span class="line">smallest_circle (FinalBalls, Row, Column, Radius)</span><br><span class="line">NumBalls := |Radius|</span><br><span class="line">Diameter := 2 * Radius</span><br><span class="line">meanDiameter := mean(Diameter)</span><br><span class="line">minDiameter := min(Diameter)</span><br><span class="line">dev_display (Bond)</span><br><span class="line">disp_circle (WindowID, Row, Column, Radius)</span><br><span class="line">dev_set_color (&#x27;white&#x27;)</span><br><span class="line">disp_message (WindowID, &#x27;D: &#x27; + Diameter$&#x27;.4&#x27;, &#x27;image&#x27;, Row - 2 * Radius, Column, &#x27;white&#x27;, &#x27;false&#x27;)</span><br><span class="line">dev_update_window (&#x27;on&#x27;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> Halcon示例程序 </category>
          
          <category> Blob分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>autobahn.hdev</title>
      <link href="/2024/10/11/autobahn.hdev/"/>
      <url>/2024/10/11/autobahn.hdev/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：  快速检测道路上的车道线</strong>。<br><em>THIK</em>：使用栅格限制处理范围，加速计算。程序在有车的地方，还是存在一点误判。（PS：图像有点太理想了，灰度值在190之上的除了道路线、车和天空，几乎没什么噪声。）</p></blockquote><ol><li>初始化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dev_update_window (&#x27;off&#x27;)</span><br><span class="line">dev_close_window ()</span><br><span class="line">dev_open_window (0, 0, 768, 575, &#x27;black&#x27;, WindowID)</span><br><span class="line">MinSize := 30</span><br><span class="line">* 使得在创建新图像时，不自动初始化</span><br><span class="line">get_system (&#x27;init_new_image&#x27;, Information)</span><br><span class="line">set_system (&#x27;init_new_image&#x27;, &#x27;false&#x27;)</span><br><span class="line">* 生成并裁剪栅格区域，用于车道线检测</span><br><span class="line">gen_grid_region (Grid, MinSize, MinSize, &#x27;lines&#x27;, 512, 512)</span><br><span class="line">clip_region (Grid, StreetGrid, 130, 10, 450, 502)</span><br><span class="line">dev_set_line_width (3)</span><br><span class="line">dev_set_color (&#x27;green&#x27;)</span><br><span class="line">read_image (ActualImage, &#x27;autobahn/scene_00&#x27;)</span><br><span class="line">dev_display (ActualImage)</span><br><span class="line">stop ()</span><br><span class="line">dev_display (StreetGrid)</span><br><span class="line">stop ()</span><br></pre></td></tr></table></figure></li><li>使用图像梯度信息，确定车道线周围轮廓区域，裁剪后再提取车道线<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">for i := 0 to 28 by 1</span><br><span class="line">    read_image (ActualImage, &#x27;autobahn/scene_&#x27; + (i$&#x27;02&#x27;))</span><br><span class="line">    reduce_domain (ActualImage, StreetGrid, Mask)</span><br><span class="line">    * 使用sobel滤波计算图像梯度Gradient</span><br><span class="line">    sobel_amp (Mask, Gradient, &#x27;sum_abs&#x27;, 3)</span><br><span class="line">    * 二值化提取阈值∈（20，255）的区域，然后膨胀</span><br><span class="line">    threshold (Gradient, Points, 20, 255)</span><br><span class="line">    dilation_rectangle1 (Points, RegionDilation, MinSize, MinSize)</span><br><span class="line">    * 裁剪图像。至此车道线周围轮廓区域提取完成。</span><br><span class="line">    reduce_domain (ActualImage, RegionDilation, StripGray)</span><br><span class="line">    * 再二值化提取车道线（高亮区域）</span><br><span class="line">    threshold (StripGray, Strip, 190, 255)</span><br><span class="line">    fill_up (Strip, RegionFillUp)</span><br><span class="line">    dev_display (ActualImage)</span><br><span class="line">    dev_display (RegionFillUp)</span><br><span class="line">endfor</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> Halcon示例程序 </category>
          
          <category> Blob分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3d_position_of_rectangle.hdev</title>
      <link href="/2024/10/11/3d_position_of_rectangle.hdev/"/>
      <url>/2024/10/11/3d_position_of_rectangle.hdev/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：识别图像中的矩形并进行姿态估计</strong><br><em>THIK</em>：判断并剔除了矩形和图像边缘相交的情况。通过面积判断相交的方法可学。</p></blockquote><ol><li><p>初始化：保留空区域，设置窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Width := 800</span><br><span class="line">Height := 800</span><br><span class="line">RectWidth := 0.095</span><br><span class="line">RectHeight := 0.035</span><br><span class="line"></span><br><span class="line">get_system (&#x27;clip_region&#x27;, ClipRegion)</span><br><span class="line">get_system (&#x27;store_empty_region&#x27;, StoreEmptyRegion)</span><br><span class="line">get_system (&#x27;empty_region_result&#x27;, EmptyRegionResult)</span><br><span class="line">* 禁用区域裁剪（默认情况下，如果区域超过图像边界，Halcon会自动将其裁剪到图像范围内。）</span><br><span class="line">set_system (&#x27;clip_region&#x27;, &#x27;false&#x27;)、</span><br><span class="line">* 允许空区域的存储，避免处理它时产生错误</span><br><span class="line">set_system (&#x27;store_empty_region&#x27;, &#x27;true&#x27;)</span><br><span class="line">set_system (&#x27;empty_region_result&#x27;, &#x27;true&#x27;)</span><br><span class="line"></span><br><span class="line">dev_close_window ()</span><br><span class="line">dev_open_window (0, 0, Width / 2, Height / 2, &#x27;black&#x27;, WindowHandle)</span><br><span class="line">set_display_font (WindowHandle, 16, &#x27;mono&#x27;, &#x27;true&#x27;, &#x27;false&#x27;)</span><br><span class="line">dev_set_part (0, 0, Height - 1, Width - 1)</span><br><span class="line">dev_update_off ()</span><br><span class="line">dev_set_draw (&#x27;margin&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>相机参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 标定板文件</span><br><span class="line">CaltabName := &#x27;caltab_30mm.descr&#x27;</span><br><span class="line">Dir := &#x27;metal-parts&#x27;</span><br><span class="line">* 相机参数</span><br><span class="line">gen_cam_par_area_scan_division (0.0136446, 830.197, 4.58317e-006, 4.65e-006, 509.153, 487.791, 800, 800, CamParam)</span><br></pre></td></tr></table></figure></li><li><p>矩形识别及姿态估计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">dev_set_colored (12)</span><br><span class="line">dev_set_line_width (1)</span><br><span class="line">gen_rectangle1 (ImageBorder, 2, 2, Height - 2, Width - 2)</span><br><span class="line">* 区域的补集</span><br><span class="line">complement (ImageBorder, ImageBorder)</span><br><span class="line">for I := 1 to 5 by 1</span><br><span class="line">    read_image (Image, Dir + &#x27;/work_sheet_&#x27; + I$&#x27;.2&#x27;)</span><br><span class="line">    dev_display (Image)</span><br><span class="line">    * 均值+二值化，提取亮部区域</span><br><span class="line">    mean_image (Image, ImageMean, 201, 201)</span><br><span class="line">    dyn_threshold (Image, ImageMean, Region, 0, &#x27;light&#x27;)</span><br><span class="line">    * 填充、分离、腐蚀、膨胀、然后按照面积，凸度和矩形度筛选矩形</span><br><span class="line">    fill_up (Region, RegionFillUp)</span><br><span class="line">    connection (RegionFillUp, ConnectedRegions)</span><br><span class="line">    erosion_circle (ConnectedRegions, RegionErosion, 3.5)</span><br><span class="line">    dilation_circle (RegionErosion, RegionDilation, 3.5)</span><br><span class="line">    select_shape (RegionDilation, Objects, [&#x27;area&#x27;, &#x27;convexity&#x27;, &#x27;rectangularity&#x27;], &#x27;and&#x27;, [2000, 0.9, 0.8], [4000000, 1, 1])</span><br><span class="line">    * 计算矩形和图像边界的交集区域</span><br><span class="line">    intersection (Objects, ImageBorder, RegionIntersection)</span><br><span class="line">    area_center (RegionIntersection, Area, Row, Column)</span><br><span class="line">    * 筛选不与边界相交的矩形对象</span><br><span class="line">    select_mask_obj (Objects, RectangularRegions, Area [==] 0)</span><br><span class="line">    * 利用矩形区域和相机参数估计矩形物体的姿态</span><br><span class="line">    find_pose_from_region (RectangularRegions, Image, CamParam, WindowHandle, RectWidth, RectHeight, &#x27;small_detail/cut_edges&#x27;, PoseSmallField)</span><br><span class="line">    if (|PoseSmallField| &gt; 0)</span><br><span class="line">        display_3D_detail (PoseSmallField, RectWidth, RectHeight, CamParam)</span><br><span class="line">    endif</span><br><span class="line">    if (I &lt; 5)</span><br><span class="line">        disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">        stop ()</span><br><span class="line">    endif</span><br><span class="line">endfor</span><br></pre></td></tr></table></figure></li><li><p>恢复系统参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set_system (&#x27;clip_region&#x27;, ClipRegion)</span><br><span class="line">set_system (&#x27;store_empty_region&#x27;, StoreEmptyRegion)</span><br><span class="line">set_system (&#x27;empty_region_result&#x27;, EmptyRegionResult)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> Halcon示例程序 </category>
          
          <category> Blob分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3d_coordinates.hdev</title>
      <link href="/2024/10/09/3d_coordinates.hdev/"/>
      <url>/2024/10/09/3d_coordinates.hdev/</url>
      
        <content type="html"><![CDATA[<p>关于相机标定的详细解释，请参考：<a href="https://blog.csdn.net/cashmood/article/details/100089295">Halcon相机标定</a></p><hr><blockquote><p><strong>功能：相机在3D空间的标定，对象会倾斜和旋转。</strong><br><em>THIK</em>：标定的主要目的是确定相机的参数<em>CamParam</em>（如焦距、主点坐标、畸变系数、相机在世界坐标系中的位置和姿态等）。这些参数是准确测量和3D重建的基础。标定后测量标定板的边距与标志点的直径，并通过测量结果的标准差反映标定效果。</p></blockquote><ol><li><p>设置窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dev_close_window ()</span><br><span class="line">dev_open_window (0, 0, 768, 576, &#x27;black&#x27;, WindowHandle)</span><br><span class="line">dev_update_off ()</span><br><span class="line">dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">dev_set_line_width (3)</span><br><span class="line">set_display_font (WindowHandle, 14, &#x27;mono&#x27;, &#x27;true&#x27;, &#x27;false&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>创建标定数据和相机参数，读取多张标定图像并寻找标定板，提取并显示标定板的轮廓与位置，最后进行相机标定，计算出相机参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">* 标定板描述文件</span><br><span class="line">CalTabDescrFile := &#x27;caltab_big.descr&#x27; </span><br><span class="line">* 相机参数</span><br><span class="line">gen_cam_par_area_scan_division (0.008, 0, 0.0000086, 0.0000086, 384, 288, 768, 576, StartCamPar)</span><br><span class="line">* 创建标定数据对象</span><br><span class="line">create_calib_data (&#x27;calibration_object&#x27;, 1, 1, CalibDataID) </span><br><span class="line">* 将相机参数设置到标定数据对象中</span><br><span class="line">set_calib_data_cam_param (CalibDataID, 0, [], StartCamPar)</span><br><span class="line">* 将标定板描述文件与标定数据对象关联</span><br><span class="line">set_calib_data_calib_object (CalibDataID, 0, CalTabDescrFile)</span><br><span class="line"></span><br><span class="line">NumImages := 10</span><br><span class="line">for I := 1 to NumImages by 1</span><br><span class="line">    read_image (Image, &#x27;calib/calib-3d-coord-&#x27; + I$&#x27;02d&#x27;)</span><br><span class="line">    dev_display (Image)</span><br><span class="line">    Message := &#x27;Find calibration plate in\nall calibration images (&#x27; + I + &#x27;/&#x27; + NumImages + &#x27;)&#x27;</span><br><span class="line">    disp_message (WindowHandle, Message, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    * 在图像中查找标定板，根据标定数据ID和图像索引（I-1）进行查找</span><br><span class="line">    find_calib_object (Image, CalibDataID, 0, 0, I - 1, [], [])</span><br><span class="line">    * 从标定数据中获取相机的初始参数</span><br><span class="line">    get_calib_data (CalibDataID, &#x27;camera&#x27;, 0, &#x27;init_params&#x27;, StartCamPar)</span><br><span class="line">    * 获取标定过程中观察到的标定点的坐标和姿态</span><br><span class="line">    get_calib_data_observ_points (CalibDataID, 0, 0, I - 1, Row, Column, Index, Pose)</span><br><span class="line">    * 获取标定板的轮廓数据</span><br><span class="line">    get_calib_data_observ_contours (Contours, CalibDataID, &#x27;caltab&#x27;, 0, 0, I - 1)</span><br><span class="line">    * 生成一个十字形轮廓，中心在找到的标定点位置</span><br><span class="line">    gen_cross_contour_xld (Cross, Row, Column, 6, 0.785398)</span><br><span class="line">    dev_set_color (&#x27;green&#x27;)</span><br><span class="line">    dev_display (Contours)</span><br><span class="line">    dev_set_color (&#x27;yellow&#x27;)</span><br><span class="line">    dev_display (Cross)</span><br><span class="line">endfor</span><br><span class="line">disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">stop ()</span><br><span class="line">* 执行相机标定，计算相机的实际参数</span><br><span class="line">calibrate_cameras (CalibDataID, Error)</span><br><span class="line">* 获取标定后的相机参数</span><br><span class="line">get_calib_data (CalibDataID, &#x27;camera&#x27;, 0, &#x27;params&#x27;, CamParam)</span><br></pre></td></tr></table></figure></li><li><p>对每张图像进行测量，包括标定板宽度和孔半径。然后转换坐标系，将测量结果从图像坐标转换到世界坐标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">for I := 1 to NumImages by 1</span><br><span class="line">    read_image (Image, &#x27;calib/calib-3d-coord-&#x27; + I$&#x27;02d&#x27;)</span><br><span class="line">    * 根据相机参数和标定数据，从图像中获取测量位置，包括板的中心行列和方向</span><br><span class="line">    get_measure_positions (Image, PlateRegion, CalibDataID, I, Distance, Phi, RowCenter, ColumnCenter)</span><br><span class="line">    * 生成一个矩形轮廓，位置和方向基于测量结果</span><br><span class="line">    gen_rectangle2_contour_xld (Rectangle, RowCenter, ColumnCenter, Phi, Distance * 0.52, 8)</span><br><span class="line">    * 生成一个测量矩形，用于后续的测量操作</span><br><span class="line">    gen_measure_rectangle2 (RowCenter, ColumnCenter, Phi, Distance * 0.52, 8, 768, 576, &#x27;nearest_neighbor&#x27;, MeasureHandle)</span><br><span class="line">    * 对图像进行测量，获取矩形边缘的位置、强度和测量结果</span><br><span class="line">    measure_pos (Image, MeasureHandle, 1, 40, &#x27;all&#x27;, &#x27;all&#x27;, RowEdge, ColumnEdge, Amplitude, Distance1)</span><br><span class="line"></span><br><span class="line">    Rows := [RowEdge[0],RowEdge[|RowEdge| - 1]]</span><br><span class="line">    Columns := [ColumnEdge[0],ColumnEdge[|RowEdge| - 1]]</span><br><span class="line">    * 生成一个十字形轮廓，表示测量的边缘位置</span><br><span class="line">    gen_cross_contour_xld (Cross, Rows, Columns, 16, Phi)</span><br><span class="line"></span><br><span class="line">    * 获取标定对象的姿态信息</span><br><span class="line">    get_calib_data (CalibDataID, &#x27;calib_obj_pose&#x27;, [0,I - 1], &#x27;pose&#x27;, Pose)</span><br><span class="line">    * 将图像坐标转换为世界坐标系</span><br><span class="line">    image_points_to_world_plane (CamParam, Pose, Rows, Columns, &#x27;m&#x27;, SX, SY)</span><br><span class="line">    * 测量出的宽度</span><br><span class="line">    distance_pp (SY[0], SX[0], SY[1], SX[1], Width)</span><br><span class="line">   </span><br><span class="line">    dev_display (Image)</span><br><span class="line">    dev_set_color (&#x27;white&#x27;)</span><br><span class="line">    dev_set_line_width (3)</span><br><span class="line">    dev_display (Rectangle)</span><br><span class="line">    dev_set_color (&#x27;green&#x27;)</span><br><span class="line">    dev_set_draw (&#x27;fill&#x27;)</span><br><span class="line">    dev_set_line_width (2)</span><br><span class="line">    dev_display (Cross)</span><br><span class="line">    dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">    disp_message (WindowHandle, &#x27;Width = &#x27; + (Width * 100)$&#x27;8.3f&#x27; + &#x27;cm&#x27;, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    stop ()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    * 对标定板内区域进行圆形腐蚀操作，生成ROI</span><br><span class="line">    erosion_circle (PlateRegion, ROI, 17.5)</span><br><span class="line">    reduce_domain (Image, ROI, ImageReduced)</span><br><span class="line">    * 边缘检测</span><br><span class="line">    edges_sub_pix (ImageReduced, Edges, &#x27;canny&#x27;, 1, 20, 60)</span><br><span class="line">    * 通过长度筛选</span><br><span class="line">    select_contours_xld (Edges, SelectedEdges, &#x27;contour_length&#x27;, 20, 99999999, -0.5, 0.5)</span><br><span class="line">    </span><br><span class="line">    * 对选中的轮廓进行椭圆拟合，输出椭圆的参数（中心行列、角度、半径等）</span><br><span class="line">    fit_ellipse_contour_xld (SelectedEdges, &#x27;fitzgibbon&#x27;, -1, 2, 0, 200, 3, 2, Row, Column, Phi, Radius1, Radius2, StartPhi, EndPhi, PointOrder)</span><br><span class="line">    * 计算拟合得到的半径的平均值和标准偏差</span><br><span class="line">    MeanRadius1 := mean(Radius1)</span><br><span class="line">    MeanRadius2 := mean(Radius2)</span><br><span class="line">    DevRadius1 := deviation(Radius1)</span><br><span class="line">    DevRadius2 := deviation(Radius2)</span><br><span class="line">    </span><br><span class="line">    * 将选中的轮廓转换到世界坐标系</span><br><span class="line">    contour_to_world_plane_xld (SelectedEdges, WorldCircles, CamParam, Pose, &#x27;mm&#x27;)</span><br><span class="line">    </span><br><span class="line">    * 对世界坐标系中的圆进行椭圆拟合，输出参数</span><br><span class="line">    fit_ellipse_contour_xld (WorldCircles, &#x27;fitzgibbon&#x27;, -1, 2, 0, 200, 3, 2, Row, Column, Phi, RadiusW1, RadiusW2, StartPhi, EndPhi, PointOrder)</span><br><span class="line">    MeanRadiusW1 := mean(RadiusW1)</span><br><span class="line">    MeanRadiusW2 := mean(RadiusW2)</span><br><span class="line">    DevRadiusW1 := deviation(RadiusW1)</span><br><span class="line">    DevRadiusW2 := deviation(RadiusW2)</span><br><span class="line">    </span><br><span class="line">    dev_display (Image)</span><br><span class="line">    dev_set_color (&#x27;yellow&#x27;)</span><br><span class="line">    dev_set_line_width (3)</span><br><span class="line">    dev_display (SelectedEdges)</span><br><span class="line">    Message := &#x27;Measured dimensions of the ellipses&#x27;</span><br><span class="line">    Message[0] := &#x27;                    Mean Radius1; Mean Radius2; (Standard deviations [%])&#x27;</span><br><span class="line">    * 图像坐标系下的平均半径及其标准偏差</span><br><span class="line">    Message[1] := &#x27;Image coordinates:       &#x27; + MeanRadius1$&#x27;5.2f&#x27; + &#x27;px; &#x27; + MeanRadius2$&#x27;5.2f&#x27; + &#x27;px            (&#x27; + (DevRadius1 / MeanRadius1 * 100)$&#x27;4.2f&#x27; + &#x27;, &#x27; + (DevRadius2 / MeanRadius2 * 100)$&#x27;4.2f&#x27; + &#x27;)&#x27;</span><br><span class="line">    * 世界坐标系下的平均半径及其标准偏差</span><br><span class="line">    Message[2] := &#x27;World coordinates:       &#x27; + (MeanRadiusW1 / 10)$&#x27;5.2f&#x27; + &#x27;cm; &#x27; + (MeanRadiusW2 / 10)$&#x27;5.2f&#x27; + &#x27;cm            (&#x27; + (DevRadiusW1 / MeanRadiusW1 * 100)$&#x27;4.2f&#x27; + &#x27;, &#x27; + (DevRadiusW2 / MeanRadiusW2 * 100)$&#x27;4.2f&#x27; + &#x27;)&#x27;</span><br><span class="line">    disp_message (WindowHandle, Message, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    if (I &lt; 10)</span><br><span class="line">        disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">        stop ()</span><br><span class="line">    else</span><br><span class="line">        disp_end_of_program_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    endif</span><br><span class="line">endfor</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> Halcon示例程序 </category>
          
          <category> 相机标定 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3d_position_of_circle.hdev</title>
      <link href="/2024/10/09/3d_position_of_circle.hdev/"/>
      <url>/2024/10/09/3d_position_of_circle.hdev/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>功能：提取圆轮廓并确定圆（钻孔）的3D位置</strong>，本地函数p_determine_ellipse_contours和p_cluster_normals的解析，附在主程序解析之后。<br><em>THIK</em>：把大小圆分开检测，只是为了提升准确度嘛（？）</p></blockquote><ol><li>读取图像，设置窗口</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dev_update_off ()</span><br><span class="line">read_image (Image, &#x27;rim&#x27;)</span><br><span class="line">get_image_size (Image, Width, Height)</span><br><span class="line">dev_open_window_fit_image (Image, 0, 0, Width, Height, WindowHandle)</span><br><span class="line">set_display_font (WindowHandle, 16, &#x27;mono&#x27;, &#x27;true&#x27;, &#x27;false&#x27;)</span><br><span class="line">dev_display (Image)</span><br><span class="line">dev_set_line_width (3)</span><br></pre></td></tr></table></figure><ol start="2"><li>提取钻孔的椭圆轮廓，输出分为大和小两种轮廓。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* （本地函数）提取椭圆轮廓，分大小两类</span><br><span class="line">p_determine_ellipse_contours (Image, EllipseContoursLarge, EllipseContoursSmall, false, NumberLarge, NumberSmall)</span><br><span class="line">concat_obj (EllipseContoursLarge, EllipseContoursSmall, EllipseContours)</span><br></pre></td></tr></table></figure><ol start="3"><li>计算孔的pose<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RadiusLarge := 10.25 / 1000.0</span><br><span class="line">RadiusSmall := 5.91 / 1000.0</span><br><span class="line">gen_cam_par_area_scan_division (0.0122, -261.04, 7.39e-6, 7.4e-6, 303.12, 234.17, 652, 494, CamParam)</span><br><span class="line">* 计算圆的位置和方向</span><br><span class="line">get_circle_pose (EllipseContours, CamParam, [gen_tuple_const(NumberLarge,RadiusLarge),gen_tuple_const(NumberSmall,RadiusSmall)], &#x27;pose&#x27;, Pose1, Pose2)</span><br><span class="line">* 计算圆心的法向量</span><br><span class="line">get_circle_pose (EllipseContours, CamParam, [gen_tuple_const(NumberLarge,RadiusLarge),gen_tuple_const(NumberSmall,RadiusSmall)], &#x27;center_normal&#x27;, CenterNormal1, CenterNormal2)</span><br><span class="line">* （本地函数）聚类。对于ClusterP1，它包含每个圆的位姿信息，通常包括位置（X、Y、Z）和旋转（例如，以四元数或欧拉角表示）</span><br><span class="line">p_cluster_normals (Pose1, Pose2, CenterNormal1, CenterNormal2, ClusterP1, ClusterP2, ClusterCN1, ClusterCN2)</span><br></pre></td></tr></table></figure></li><li>计算并展示圆在相机坐标系下的3D位置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dev_display (Image)</span><br><span class="line">dev_set_colored (12)</span><br><span class="line">dev_display (EllipseContours)</span><br><span class="line">for i := 0 to NumberLarge + NumberSmall - 1 by 1</span><br><span class="line">    * 将圆的位姿转换为3D齐次变换矩阵</span><br><span class="line">    pose_to_hom_mat3d (ClusterP1[i * 7:i * 7 + 6], HomMat3D)</span><br><span class="line">    affine_trans_point_3d (HomMat3D, 0, 0, 0, Qx, Qy, Qz)</span><br><span class="line">    * 将3D点投影到2D图像平面上，得到行列坐标(Row, Column)</span><br><span class="line">    project_3d_point (Qx, Qy, Qz, CamParam, Row, Column)</span><br><span class="line">    Row := Row - 95</span><br><span class="line">    Column := Column - 60</span><br><span class="line">    disp_message (WindowHandle, [&#x27;X=&#x27; + ClusterCN1[i * 6]$&#x27;6.3f&#x27;,&#x27;Y=&#x27; + ClusterCN1[i * 6 + 1]$&#x27;6.3f&#x27;,&#x27;Z=&#x27; + ClusterCN1[i * 6 + 2]$&#x27;6.3f&#x27;], &#x27;window&#x27;, Row, Column, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">endfor</span><br></pre></td></tr></table></figure></li></ol><h3 id="p-determine-ellipse-contours函数解析"><a href="#p-determine-ellipse-contours函数解析" class="headerlink" title="p_determine_ellipse_contours函数解析"></a>p_determine_ellipse_contours函数解析</h3><blockquote><p><strong>功能: 从输入图像中提取圆形或椭圆形的轮廓</strong>。通过图像预处理、形状选择、边缘检测、以及椭圆拟合等步骤，最终生成精确的椭圆轮廓。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">threshold (Image, Dark, 0, 128)</span><br><span class="line">if (visualization)</span><br><span class="line">    dev_display (Image)</span><br><span class="line">    dev_set_color (&#x27;green&#x27;)</span><br><span class="line">    dev_set_draw (&#x27;fill&#x27;)</span><br><span class="line">    dev_display (Dark)</span><br><span class="line">    stop ()</span><br><span class="line">endif</span><br><span class="line">* </span><br><span class="line">* 提取连通块并通过圆度和面积进行筛选</span><br><span class="line">connection (Dark, DarkRegions)</span><br><span class="line">select_shape (DarkRegions, Circles, [&#x27;circularity&#x27;, &#x27;area&#x27;], &#x27;and&#x27;, [0.85, 50], [1.0, 99999])</span><br><span class="line">if (visualization)</span><br><span class="line">    dev_display (Image)</span><br><span class="line">    dev_set_colored (12)</span><br><span class="line">    dev_display (Circles)</span><br><span class="line">    stop ()</span><br><span class="line">endif</span><br><span class="line">* </span><br><span class="line">dilation_circle (Circles, ROIOuter, 8.5)</span><br><span class="line">erosion_circle (Circles, ROIInner, 8.5)</span><br><span class="line">* 膨胀、腐蚀后相减，相当于从圆环中去掉中心，留下边缘区域</span><br><span class="line">difference (ROIOuter, ROIInner, ROI)</span><br><span class="line">union1 (ROI, ROIEdges)</span><br><span class="line">if (visualization)</span><br><span class="line">    dev_display (Image)</span><br><span class="line">    dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">    dev_set_color (&#x27;green&#x27;)</span><br><span class="line">    dev_display (ROIEdges)</span><br><span class="line">    stop ()</span><br><span class="line">endif</span><br><span class="line">* </span><br><span class="line">* 边缘检测</span><br><span class="line">reduce_domain (Image, ROIEdges, RimReduced)</span><br><span class="line">edges_sub_pix (RimReduced, Edges, &#x27;canny&#x27;, 2, 20, 40)</span><br><span class="line">* </span><br><span class="line">* 筛选大圆的边缘</span><br><span class="line">select_contours_xld (Edges, EdgesLarge, &#x27;contour_length&#x27;, 200, 300, 0, 0)</span><br><span class="line">count_obj (EdgesLarge, NumberLarge)</span><br><span class="line">* 对轮廓进行椭圆拟合，得到椭圆的参数</span><br><span class="line">fit_ellipse_contour_xld (EdgesLarge, &#x27;ftukey&#x27;, -1, 2, 0, 200, 3, 2, Row, Column, Phi, Ra, Rb, StartPhi, EndPhi, PointOrder)</span><br><span class="line">* 使用拟合参数生成椭圆轮廓</span><br><span class="line">gen_ellipse_contour_xld (EllipseContoursLarge, Row, Column, gen_tuple_const(NumberLarge,0), Ra, Rb, gen_tuple_const(NumberLarge,0), gen_tuple_const(NumberLarge,rad(360)), gen_tuple_const(NumberLarge,&#x27;positive&#x27;), 1.5)</span><br><span class="line">* </span><br><span class="line">* 筛选小圆的边缘，并生成对应轮廓</span><br><span class="line">select_contours_xld (Edges, EdgesSmall, &#x27;contour_length&#x27;, 100, 200, 0, 0)</span><br><span class="line">count_obj (EdgesSmall, NumberSmall)</span><br><span class="line">fit_ellipse_contour_xld (EdgesSmall, &#x27;ftukey&#x27;, -1, 2, 0, 200, 3, 2, Row, Column, Phi, Ra, Rb, StartPhi, EndPhi, PointOrder)</span><br><span class="line">gen_ellipse_contour_xld (EllipseContoursSmall, Row, Column, gen_tuple_const(NumberSmall,0), Ra, Rb, gen_tuple_const(NumberSmall,0), gen_tuple_const(NumberSmall,rad(360)), gen_tuple_const(NumberSmall,&#x27;positive&#x27;), 1.5)</span><br><span class="line">* </span><br><span class="line">if (visualization)</span><br><span class="line">    dev_display (Image)</span><br><span class="line">    dev_set_color (&#x27;green&#x27;)</span><br><span class="line">    dev_display (EllipseContoursLarge)</span><br><span class="line">    dev_set_color (&#x27;blue&#x27;)</span><br><span class="line">    dev_display (EllipseContoursSmall)</span><br><span class="line">    stop ()</span><br><span class="line">endif</span><br><span class="line">return ()</span><br></pre></td></tr></table></figure><h3 id="p-cluster-normals函数解析"><a href="#p-cluster-normals函数解析" class="headerlink" title="p_cluster_normals函数解析"></a>p_cluster_normals函数解析</h3><blockquote><p><strong>功能：对两组位姿和法向量进行聚类</strong>，确保方向一致的法向量被分到同一个聚类中。通过计算法向量的点积和偏差，最终选择偏差较小的聚类进行输出。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Number := |CenterNormal1| / 6</span><br><span class="line">ClusterP1 := Pose1[0:6]</span><br><span class="line">ClusterP2 := Pose2[0:6]</span><br><span class="line">ClusterCN1 := CenterNormal1[0:5]</span><br><span class="line">ClusterCN2 := CenterNormal2[0:5]</span><br><span class="line">NA := ClusterCN1[3:5]</span><br><span class="line">NB := ClusterCN2[3:5]</span><br><span class="line">for i := 1 to Number - 1 by 1</span><br><span class="line">    N1 := CenterNormal1[i * 6 + 3:i * 6 + 5]</span><br><span class="line">    N2 := CenterNormal2[i * 6 + 3:i * 6 + 5]</span><br><span class="line">    N1NA := sum(N1 * NA)</span><br><span class="line">    N1NB := sum(N1 * NB)</span><br><span class="line">    N2NA := sum(N2 * NA)</span><br><span class="line">    N2NB := sum(N2 * NB)</span><br><span class="line">    tuple_sort_index ([N1NA,N1NB,N2NA,N2NB] * -1, Indices)</span><br><span class="line">    if (Indices[0] == 0 or Indices[0] == 3)</span><br><span class="line">        ClusterP1 := [ClusterP1,Pose1[i * 7:i * 7 + 6]]</span><br><span class="line">        ClusterP2 := [ClusterP2,Pose2[i * 7:i * 7 + 6]]</span><br><span class="line">        ClusterCN1 := [ClusterCN1,CenterNormal1[i * 6:i * 6 + 5]]</span><br><span class="line">        ClusterCN2 := [ClusterCN2,CenterNormal2[i * 6:i * 6 + 5]]</span><br><span class="line">    else</span><br><span class="line">        ClusterP1 := [ClusterP1,Pose2[i * 7:i * 7 + 6]]</span><br><span class="line">        ClusterP2 := [ClusterP2,Pose1[i * 7:i * 7 + 6]]</span><br><span class="line">        ClusterCN1 := [ClusterCN1,CenterNormal2[i * 6:i * 6 + 5]]</span><br><span class="line">        ClusterCN2 := [ClusterCN2,CenterNormal1[i * 6:i * 6 + 5]]</span><br><span class="line">    endif</span><br><span class="line">endfor</span><br><span class="line">* </span><br><span class="line">idx := []</span><br><span class="line">for i := 0 to Number - 1 by 1</span><br><span class="line">    idx := [idx,i * 6 + 3]</span><br><span class="line">endfor</span><br><span class="line">DeviationC1 := deviation(subset(ClusterCN1,idx)) + deviation(subset(ClusterCN1,idx + 1)) + deviation(subset(ClusterCN1,idx + 2))</span><br><span class="line">DeviationC2 := deviation(subset(ClusterCN2,idx)) + deviation(subset(ClusterCN2,idx + 1)) + deviation(subset(ClusterCN2,idx + 2))</span><br><span class="line">if (DeviationC2 &lt; DeviationC1)</span><br><span class="line">    Help := ClusterP1</span><br><span class="line">    ClusterP1 := ClusterP2</span><br><span class="line">    ClusterP2 := Help</span><br><span class="line">    Help := ClusterCN1</span><br><span class="line">    ClusterCN1 := ClusterCN2</span><br><span class="line">    ClusterCN2 := Help</span><br><span class="line">endif</span><br><span class="line">return ()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Halcon方法 </category>
          
          <category> Halcon示例程序 </category>
          
          <category> Blob分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Fields Division</title>
      <link href="/2022/04/28/Fields%20Division/"/>
      <url>/2022/04/28/Fields%20Division/</url>
      
        <content type="html"><![CDATA[<p><strong>题目来源：</strong></p><p>2021-2022 ACM-ICPC Latin American Regional Programming Contest</p><p><strong>时间：</strong></p><p>2022.4.28</p><p><strong>题解：</strong></p><p><strong>并查集 + 思维 （连通块思想）</strong><br>要保证A和B得到的田地的产量尽可能相等，所以肯定是A拿第n块田地，B拿第n-1块田地。然后剩下的田地，只要B能拿就拿（与第n-1块田相连的就能拿），剩下的给A。这样就能保证B的田地的产量尽可能大。<br>因为第n块田的产量比【1，n-1】的田地的产量总和还要大，第n-1块田地同理。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">10</span> + <span class="number">3e5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">3e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x] == x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">get</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> dx = <span class="built_in">get</span>(u);</span><br><span class="line"><span class="type">int</span> dy = <span class="built_in">get</span>(v);</span><br><span class="line"><span class="keyword">if</span>(dx != dy)</span><br><span class="line">&#123;</span><br><span class="line">fa[dx] = dy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u, v; cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">max</span>(u, v) == n) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">merge</span>(u, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">get</span>(i) == <span class="built_in">get</span>(n<span class="number">-1</span>)) cout&lt;&lt;<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;A&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="built_in">slove</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>P1197 [JSOI2008]星球大战</title>
      <link href="/2022/04/28/P1197%20%5BJSOI2008%5D%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98/"/>
      <url>/2022/04/28/P1197%20%5BJSOI2008%5D%E6%98%9F%E7%90%83%E5%A4%A7%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p><strong>时间：</strong></p><p>2022.4.28</p><p><strong>题解：</strong></p><p>并查集 + 思维。正向难以求解，所以把题目反向理解为，一边添加点，一边求连通块个数。<br>此时初始状态就是其他所有已经存在的点组成的图。根据 fa[i] &#x3D;&#x3D; i 统计联通块的个数。<br>然后按照输入的逆序添加点，刚添加的点独立，所以是一个新的连通块，cnt++。<br>然后枚举这个点相连的所有点，因为要连边。在它相连的点之间，如果存在一个点已经在图中出现，且它们两个不在一个连通块中，那么他们相连就会导致连通块数减一，即 cnt- -。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;#x&lt;&lt;<span class="string">&quot; = &quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span> + <span class="number">4e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot, head[N], fa[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to, next, val;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[tot].to = v; e[tot].next = head[u]; head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x] == x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">get</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> dx = <span class="built_in">get</span>(a);</span><br><span class="line"><span class="type">int</span> dy = <span class="built_in">get</span>(b);</span><br><span class="line"><span class="keyword">if</span>(dx != dy)</span><br><span class="line">&#123;</span><br><span class="line">fa[dx] = dy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) fa[i] = i;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">g</span>(n);</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">u</span><span class="params">(m)</span>, <span class="title">v</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) </span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;u[i]&gt;&gt;v[i];</span><br><span class="line"><span class="built_in">add</span>(u[i], v[i]); <span class="built_in">add</span>(v[i], u[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k; cin&gt;&gt;k;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cut</span><span class="params">(k)</span></span>;</span><br><span class="line"><span class="type">int</span> mp[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) mp[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) </span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;cut[i];</span><br><span class="line">mp[cut[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!mp[u[i]] &amp;&amp; !mp[v[i]]) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">merge</span>(u[i], v[i]);</span><br><span class="linespan><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">get</span>(i) == i &amp;&amp; !mp[i]) cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = k<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">mp[cut[i]] = <span class="number">0</span>;</span><br><span class="line">ans[i] = cnt;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = head[cut[i]]; ~j; j = e[j].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[j].to;</span><br><span class="line"><span class="keyword">if</span>(!mp[v] &amp;&amp; <span class="built_in">get</span>(cut[i]) != <span class="built_in">get</span>(v))</span><br><span class="line">&#123;</span><br><span class="line">cnt--;</span><br><span class="line"><span class="built_in">merge</span>(cut[i], v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="built_in">slove</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KIARA is a Recursive Acronym（2022.4.27）</title>
      <link href="/2022/04/27/KIARA%20is%20a%20Recursive%20Acronym%EF%BC%882022.4.27%EF%BC%89/"/>
      <url>/2022/04/27/KIARA%20is%20a%20Recursive%20Acronym%EF%BC%882022.4.27%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>题目来源:</strong></p><p>2021-2022 ACM-ICPC Latin American Regional Programming Contest</p><p><strong>题意：</strong></p><p>给定 n个字符串，用其中一部分字符串组成一句话（字符串可重复使用）。判断其中是否存在一个字符串，由这句话的所有单词的首字母组成。</p><p><strong>题解：</strong></p><p>模拟题。用map标记每个字符串的首字母。逐个判断字符串的所有元素，是否都被标记过。如果是，说明可以组成符合要求的一句话。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">s</span><span class="params">(n)</span></span>;</span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;s[i];</span><br><span class="line">mp[s[i][<span class="number">0</span>]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; s[i].<span class="built_in">size</span>()<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!mp[s[i][j]])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) cout&lt;&lt;<span class="string">&quot;Y&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;N&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>零碎算法——分层图</title>
      <link href="/2022/03/04/%E9%9B%B6%E7%A2%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%88%86%E5%B1%82%E5%9B%BE/"/>
      <url>/2022/03/04/%E9%9B%B6%E7%A2%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%88%86%E5%B1%82%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>在图论中，比如最短路、网络流等，题目会有一些额外的对边的权值的操作。比如可以将一定数量的边权减半或者变为0，然后在此基础上求最优解。<br>下图中，黑色的边相当于正常的建边，蓝色的边相当于一次特殊的权值操作（减半或者变0）。从一个点到另一个点，如果选择特殊操作，就从这一层到达下一层。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/37f98988948645e4850defafb8f0b181.png" alt="在这里插入图片描述">建边操作的代码：空间复杂度O(mk)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"><span class="keyword">while</span>(m--) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="built_in">add</span>(a, b, c);</span><br><span class="line">    <span class="built_in">add</span>(b, a, c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// j层和j+1层之间建边，0代表特殊操作为 边的权值变为0</span></span><br><span class="line">        <span class="built_in">add</span>(a+(j<span class="number">-1</span>)*n, b+j*n, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">add</span>(b+(j<span class="number">-1</span>)*n, a+j*n, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// j+1层建边</span></span><br><span class="line">        <span class="built_in">add</span>(a+j*n, b+j*n, c);</span><br><span class="line">        <span class="built_in">add</span>(b+j*n, a+j*n, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="acwing-340通信线路"><a href="#acwing-340通信线路" class="headerlink" title="acwing 340通信线路"></a>acwing 340通信线路</h2><p><strong>题意</strong><br><img src="https://i-blog.csdnimg.cn/blog_migrate/78d0f8655e424f1b9884fb57f7bd723d.png" alt="在这里插入图片描述"></p><p><strong>题解</strong></p><p>建分层图，每两层之间建的边权为0，然后跑最短路。但题目最终要求的是路径上最大值是多少，所以dis的转移方程要变为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(dis[v] &gt; <span class="built_in">max</span>(dis[u], e[i].val))</span><br><span class="line">&#123;</span><br><span class="line">    dis[v] = <span class="built_in">max</span>(dis[u], e[i].val);</span><br><span class="line">    q.<span class="built_in">push</span>(node&#123;v, dis[v]&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pdd pair<span class="string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;\tdebug:&quot;</span>&lt;&lt;a&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> for1(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> for2(i, b, a) for(int i = b; i &gt;= a; i--)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;<span class="type">char</span> ch = <span class="built_in">getchar</span>();ll f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f *= <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = x*<span class="number">10</span>+ch<span class="number">-48</span>; ch = <span class="built_in">getchar</span>();&#125; x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">10</span>) <span class="built_in">print</span>(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE </span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS;</span><br><span class="line">    <span class="built_in">slove</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tot, k, s, t;</span><br><span class="line"><span class="type">int</span> vis[N], head[N], dis[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, next, val;</span><br><span class="line">&#125;e[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, val;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node&amp;b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val &gt; b.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[tot].to = v; e[tot].val = val; e[tot].next = head[u]; head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(node&#123;s, <span class="number">0</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node x = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u = x.to;</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; <span class="built_in">max</span>(dis[u], e[i].val))</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = <span class="built_in">max</span>(dis[u], e[i].val);</span><br><span class="line">                q.<span class="built_in">push</span>(node&#123;v, dis[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    s = <span class="number">1</span>; t = n;</span><br><span class="line">    <span class="keyword">while</span>(m--) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);</span><br><span class="line">        <span class="built_in">add</span>(b, a, c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// j层和j+1层之间建边，0代表特殊操作为 边值变为0</span></span><br><span class="line">            <span class="built_in">add</span>(a+(j<span class="number">-1</span>)*n, b+j*n, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">add</span>(b+(j<span class="number">-1</span>)*n, a+j*n, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// j+1层建边</span></span><br><span class="line">            <span class="built_in">add</span>(a+j*n, b+j*n, c);</span><br><span class="line">            <span class="built_in">add</span>(b+j*n, a+j*n, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加上这一段代码就代表着最终答案答案一定在k+1层图的第n个点也就是dis[(k + 1) * n]</span></span><br><span class="line"><span class="comment">// 当然也可以不加这一段,在每一层的第n个点找最小的值</span></span><br><span class="line"><span class="comment">//for(int i = 0; i &lt;= k; i++) ans = min(ans, dis[n+i*n]);</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 要防止从1到n存在一条路的边数小于k !!!!!!!</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) <span class="built_in">add</span>(i*n, (i<span class="number">+1</span>)*n, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dijkstra</span>(s);</span><br><span class="line">    <span class="keyword">if</span>(dis[(k<span class="number">+1</span>)*n] == inf) cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;dis[(k<span class="number">+1</span>)*n]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL(主要函数及时间复杂度)</title>
      <link href="/2022/03/01/STL(%E4%B8%BB%E8%A6%81%E5%87%BD%E6%95%B0%E5%8F%8A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6)/"/>
      <url>/2022/03/01/STL(%E4%B8%BB%E8%A6%81%E5%87%BD%E6%95%B0%E5%8F%8A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6)/</url>
      
        <content type="html"><![CDATA[<p>(总结ing)</p><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>key - value 键值对。map自动排序，每个key只出现一次。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>insert</strong> O(log n)</p><p><strong>erase</strong> O(log n)</p><p><strong>count</strong> O(log n)<br>只会返回 0或者 1，判断某个数是否存在。</p><p><strong>find</strong> O(log n)<br>若存在返回迭代器，否则返回 mp.end()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">    mp[<span class="number">1</span>]++; mp[<span class="number">1</span>]++; mp[<span class="number">2</span>]++;</span><br><span class="line">    <span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;it-&gt;first&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>auto遍历</strong><br>i.second &#x3D; 0; 不改变原来的值。mp[i.first] &#x3D; 0; 可以改变。</p><h1 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h1><h2 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h2><p> 内部数据是无序的，甚至和初始时的顺序都不一样。</p><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><p>函数与map基本一样。查找速度O(1)，其他方面耗时最坏能达到 O(n)，容易被卡。（待验证）</p><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><h2 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h2><p>基于倍增思想的可变长数组。vector不适合用于大量数据的插入和删除。</p><h2 id="函数-2"><a href="#函数-2" class="headerlink" title="函数"></a>函数</h2><p><strong>push_back</strong> O(1)<br>将元素插到尾部</p><p><strong>pop_back</strong> O(1)<br>将尾部元素删除</p><p><strong>insert &#x2F; erase</strong> O(n)</p><p><strong>find</strong> O(n)<br>使用的是 algorithm的 find函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">1</span>);    </span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    cout&lt;&lt; <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">3</span>) - v.<span class="built_in">begin</span>() &lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>lower_bound</strong> O(log n)<br>返回第一个大于等于 x的数的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt; <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">2</span>) - v.<span class="built_in">begin</span>() &lt;&lt;endl;</span><br></pre></td></tr></table></figure><p><strong>upper_bound</strong> O(log n)<br>返回第一个大于 x的数的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt; <span class="built_in">upper_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">2</span>) - v.<span class="built_in">begin</span>() &lt;&lt;endl;</span><br></pre></td></tr></table></figure><h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><h2 id="特性-3"><a href="#特性-3" class="headerlink" title="特性"></a>特性</h2><p>双端队列支持在两端高效插入或删除元素，支持随机访问。</p><h2 id="函数-3"><a href="#函数-3" class="headerlink" title="函数"></a>函数</h2><p><strong>begin &#x2F; end</strong> O(1)<br>头 &#x2F; 尾迭代器</p><p><strong>front &#x2F; back</strong> O(1)<br>队头 &#x2F; 队尾元素 </p><p><strong>push_back &#x2F; pop_back</strong> O(1)<br>从队尾入队 &#x2F; 出队</p><p><strong>push_front &#x2F; pop_front</strong> O(1)<br>从队头入队 &#x2F; 出队</p><p><strong>clear</strong> O(n)<br>清空队列 </p><h1 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h1><h2 id="特性-4"><a href="#特性-4" class="headerlink" title="特性"></a>特性</h2><p>先进先出。</p><h2 id="函数-4"><a href="#函数-4" class="headerlink" title="函数"></a>函数</h2><p><strong>push</strong> O(1)<br>从队尾入队</p><p><strong>pop</strong> O(1)<br>从队头出队</p><p><strong>front</strong> O(1)<br>队头元素</p><p><strong>back</strong> O(1)<br>队尾元素</p><h1 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h1><h2 id="特性-5"><a href="#特性-5" class="headerlink" title="特性"></a>特性</h2><p>优先队列具有队列的所有特性，包括基本操作，只是在它基础上添加了内部的一个排序，它本质是一个堆实现的。<br><strong>可重载运算符 &lt;</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 升序队列</span></span><br><span class="line">priority_queue &lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 降序队列（默认类型-大顶堆）</span></span><br><span class="line">priority_queue &lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,less&lt;<span class="type">int</span>&gt; &gt;q;</span><br></pre></td></tr></table></figure><h2 id="函数-5"><a href="#函数-5" class="headerlink" title="函数"></a>函数</h2><p><strong>push</strong> O(log n)<br>插入元素</p><p><strong>top</strong> O(1)<br>查询堆顶元素</p><p><strong>pop</strong> O(log n)<br>删除堆顶元素</p><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><h2 id="特性-6"><a href="#特性-6" class="headerlink" title="特性"></a>特性</h2><p>有序集合，即元素不可重复。</p><h2 id="函数-6"><a href="#函数-6" class="headerlink" title="函数"></a>函数</h2><p><strong>迭代器 ++ &#x2F; - -</strong> O(log n)</p><p><strong>begin &#x2F; end</strong> O(1)<br>头部 &#x2F; 尾部迭代器，end是最大元素的下一个位置。</p><p><strong>insert</strong> O(log n)<br>插入元素，若已存在就不会再插入</p><p><strong>find</strong> O(log n)<br>查找元素，返回迭代器，若不存在返回end。</p><p><strong>lower_bound &#x2F; upper_bound</strong> O(log n)<br>查找大于等于x &#x2F; 查找大于x</p><p><strong>erase</strong> O(log n）<br>删除迭代器指向的元素</p><p><strong>count</strong> O(log n)<br>元素x的个数。</p><h1 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h1><h2 id="特性-7"><a href="#特性-7" class="headerlink" title="特性"></a>特性</h2><p>有序可重复集合。</p><h2 id="函数-7"><a href="#函数-7" class="headerlink" title="函数"></a>函数</h2><p>函数和set的都一样，但erase和count的时间复杂度是O(k + log n)。</p><h1 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h1><h2 id="特性-8"><a href="#特性-8" class="headerlink" title="特性"></a>特性</h2><p>bitset可看作一个多位二进制数。</p><h2 id="函数-8"><a href="#函数-8" class="headerlink" title="函数"></a>函数</h2><p><strong>位运算操作符</strong><br><strong>~s</strong><br>返回对bitset按位取反的结果</p><p><strong>&amp; | ^</strong><br>返回对两个相同位数的bitset执行按位与，或，异或的运算结果。</p><p><strong>&gt;&gt; &lt;&lt;</strong><br>返回一个bitset右移，左移若干位的结果。</p><p><strong>&#x3D;&#x3D; !&#x3D;</strong><br>比较两个bitset是否相等</p><p><strong>[ ]操作符</strong><br>s[k]代表s的第k位。</p><p><strong>count</strong><br>s.count()返回有多少位1。</p><p><strong>s.set() &#x2F; s.reset()</strong><br>把s所有位变为1<br> 把s的所有位变为0</p><p><strong>s.set(k, v) &#x2F; s.reset(k)</strong><br>把s的第k位变为v，即s[k] &#x3D; v<br> 把s的第k位改为0</p><p><strong>s.flip()</strong><br>把s的所有位按位取反</p><p><strong>s.lip(k)</strong><br>把s的第k位取反</p><p><strong>any &#x2F; none</strong><br>若s所有位都为0，s.any()返回false，s.none()返回true<br>若s至少一位为1，s.any()返回true，s.some()返回false</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>板子——图论专题</title>
      <link href="/2022/02/28/%E6%9D%BF%E5%AD%90%E2%80%94%E2%80%94%E5%9B%BE%E8%AE%BA%E4%B8%93%E9%A2%98/"/>
      <url>/2022/02/28/%E6%9D%BF%E5%AD%90%E2%80%94%E2%80%94%E5%9B%BE%E8%AE%BA%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h1><h2 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h2><p><strong>特点</strong><br>单源最短路，全是正权边。时间复杂度O(m logn)。</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pdd pair<span class="string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;\tdebug:&quot;</span>&lt;&lt;a&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> for1(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> for2(i, b, a) for(int i = b; i &gt;= a; i--)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;<span class="type">char</span> ch = <span class="built_in">getchar</span>();ll f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f *= <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = x*<span class="number">10</span>+ch<span class="number">-48</span>; ch = <span class="built_in">getchar</span>();&#125; x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">10</span>) <span class="built_in">print</span>(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE </span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS;</span><br><span class="line">    <span class="built_in">slove</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tot, s, t;</span><br><span class="line"><span class="type">int</span> vis[N], head[N], dis[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, next, val;</span><br><span class="line">&#125;e[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, val;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node&amp;b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val &gt; b.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[tot].to = v; e[tot].val = val; e[tot].next = head[u]; head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(node&#123;s, <span class="number">1</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node x = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u = x.to;</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[u] + e[i].val)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u]+e[i].val;</span><br><span class="line">                q.<span class="built_in">push</span>(node&#123;v, dis[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w; cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="built_in">add</span>(u, v, w);</span><br><span class="line">        <span class="built_in">add</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    cout&lt;&lt;dis[t]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><p><strong>特点</strong><br>单源最短路，可以有负权边，不能有负环。时间复杂度：最好O(m) 最坏O(mn)。</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pdd pair<span class="string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;\tdebug:&quot;</span>&lt;&lt;a&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> for1(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> for2(i, b, a) for(int i = b; i &gt;= a; i--)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;<span class="type">char</span> ch = <span class="built_in">getchar</span>();ll f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f *= <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = x*<span class="number">10</span>+ch<span class="number">-48</span>; ch = <span class="built_in">getchar</span>();&#125; x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">10</span>) <span class="built_in">print</span>(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE </span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS;</span><br><span class="line">    <span class="built_in">slove</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tot, s, t;</span><br><span class="line"><span class="type">int</span> vis[N], head[N], dis[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, next, val;</span><br><span class="line">&#125;e[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[tot].to = v; e[tot].val = val; e[tot].next = head[u]; head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;pii&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(pii&#123;s, <span class="number">0</span>&#125;);</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        pii x = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u = x.first;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i].to; </span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[u] + e[i].val)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u]+e[i].val;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]) vis[v] = <span class="number">1</span>, q.<span class="built_in">push</span>(pii&#123;v, dis[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[t] == inf) cout&lt;&lt;<span class="string">&quot;impossible&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;dis[t]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    s = <span class="number">1</span>;</span><br><span class="line">    t = n;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w; cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="built_in">add</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="负环"><a href="#负环" class="headerlink" title="负环"></a>负环</h1><h2 id="SPFA-1"><a href="#SPFA-1" class="headerlink" title="SPFA"></a>SPFA</h2><p><strong>特点</strong><br>单源最短路，可存在负权，时间复杂度：最优O(m) 最坏O(mn)</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pdd pair<span class="string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;\tdebug:&quot;</span>&lt;&lt;a&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> for1(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> for2(i, b, a) for(int i = b; i &gt;= a; i--)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;<span class="type">char</span> ch = <span class="built_in">getchar</span>();ll f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f *= <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = x*<span class="number">10</span>+ch<span class="number">-48</span>; ch = <span class="built_in">getchar</span>();&#125; x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">10</span>) <span class="built_in">print</span>(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE </span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS;</span><br><span class="line">    <span class="built_in">slove</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tot, s, t;</span><br><span class="line"><span class="type">int</span> vis[N], head[N], dis[N], cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, next, val;</span><br><span class="line">&#125;e[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[tot].to = v; e[tot].val = val; e[tot].next = head[u]; head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;pii&gt; q;   <span class="comment">// second一般没用</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[i] = <span class="number">1</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(pii&#123;i, <span class="number">0</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        pii x = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u = x.first;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i].to; </span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[u] + e[i].val)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u]+e[i].val;</span><br><span class="line">                cnt[v] = cnt[u]<span class="number">+1</span>;</span><br><span class="line">                <span class="keyword">if</span>(cnt[v] &gt;= n) <span class="keyword">return</span> <span class="number">1</span>;   <span class="comment">// 有负环</span></span><br><span class="line">                <span class="keyword">if</span>(!vis[v]) vis[v] = <span class="number">1</span>, q.<span class="built_in">push</span>(pii&#123;v, dis[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    s = <span class="number">1</span>;</span><br><span class="line">    t = n;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w; cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="built_in">add</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="type">int</span> ans = <span class="built_in">spfa</span>();</span><br><span class="line">   <span class="keyword">if</span>(ans) cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 773 (Div. 2)（ＡＢＣＤ）</title>
      <link href="/2022/02/25/Codeforces%20Round%20773%20(Div.%202)%EF%BC%88%EF%BC%A1%EF%BC%A2%EF%BC%A3%EF%BC%A4%EF%BC%89/"/>
      <url>/2022/02/25/Codeforces%20Round%20773%20(Div.%202)%EF%BC%88%EF%BC%A1%EF%BC%A2%EF%BC%A3%EF%BC%A4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>hello # he</p><h1 id="A-Hard-Way"><a href="#A-Hard-Way" class="headerlink" title="A. Hard Way"></a>A. Hard Way</h1><p><strong>题意：</strong><br>给定一个三角形，若从y &#x3D; 0上任意一点，无法通过线段到达三角形边上（线段不能通过三角形内部），计算这种边的总长度。</p><p><strong>题解：</strong><br>当且仅当，三角形<strong>上面的边</strong>是平行于x轴的情况下，存在答案。这条边的长度即为答案。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">ll x1, y1, x2, y2, x3, y3; cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;x3&gt;&gt;y3;</span><br><span class="line"><span class="keyword">if</span>(y1 == y2 &amp;&amp;  y3 &lt; y2) cout&lt;&lt;<span class="built_in">abs</span>(x2-x1)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(y1 == y3 &amp;&amp;  y2 &lt; y1) cout&lt;&lt;<span class="built_in">abs</span>(x1-x3)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(y2 == y3 &amp;&amp;  y1 &lt; y3) cout&lt;&lt;<span class="built_in">abs</span>(x2-x3)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Power-Walking"><a href="#B-Power-Walking" class="headerlink" title="B. Power Walking"></a>B. Power Walking</h1><p><strong>题意：</strong> 给定一个数组。将该数组分为 k组（1 &lt;&#x3D; k &lt;&#x3D; n），每组的价值为不同数字的个数。计算每个 k对应的所有组的总价值的最小值。</p><p><strong>题解：</strong><br>每次分组都先把独立存在的数分出去。记原数组中不同数字的个数为cnt。当 k &lt;&#x3D; cnt时，答案为 cnt； 当 k &gt; cnt 时，答案为 cnt++。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">mp.<span class="built_in">clear</span>();</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x; cin&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(!mp[x]) cnt++, mp[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i &lt;= cnt) cout&lt;&lt;cnt&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cnt++, cout&lt;&lt;cnt&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Great-Sequence"><a href="#C-Great-Sequence" class="headerlink" title="C. Great Sequence"></a>C. Great Sequence</h1><p><strong>题意：</strong> 给定一个数组和一个 x。当一个数组中一半的数乘以x后对应的数，是该数组的另一半数时称为 great sequence。你可以在原数组中一次插入任意一个数，问最少需要插入几次能使得原数组成为great sequence。</p><p><strong>题解：</strong><br>统计原数组中的数，且其倍数为 x的数也在数组中的个数。剩下的个数就是最终答案。（好绕…）。记得开 ll</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pdd pair<span class="string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;\tdebug:&quot;</span>&lt;&lt;a&lt;&lt;endl</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;<span class="type">char</span> ch = <span class="built_in">getchar</span>();ll f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f *= <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = x*<span class="number">10</span>+ch<span class="number">-48</span>; ch = <span class="built_in">getchar</span>();&#125; x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">10</span>) <span class="built_in">print</span>(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE </span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS;</span><br><span class="line">    <span class="built_in">slove</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">ll n, x; cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">map&lt;ll, ll&gt; mp;</span><br><span class="line">mp.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">mp[a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">ll cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:mp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i.first] &gt; <span class="number">0</span> &amp;&amp; mp[i.first*x] &gt; <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">ll minn = <span class="built_in">min</span>(mp[i.first], mp[i.first*x]);</span><br><span class="line">mp[i.first] -= minn, mp[i.first*x] -= minn, cnt += <span class="number">2</span>*minn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;n-cnt&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Repetitions-Decoding"><a href="#D-Repetitions-Decoding" class="headerlink" title="D. Repetitions Decoding"></a>D. Repetitions Decoding</h1><p><strong>题意：</strong><br>给定一个数组，每次可以在数组的任一位置插入两个相同的数，数也是任意的。定义 123123这种序列为 tandem repeats。输出最终使得原数组成为 tandem repeats的过程中，操作的总次数，每次在哪个位置，插入什么值。并且输出最终数组中，每一部分为 tandem repeats的连续子段的长度。</p><p><strong>题解：</strong><br>从前往后遍历数组。假设当前位置为 i，则在它后面的位置找到位置 j，使得 a[j] &#x3D;&#x3D; a[i]。然后将 i到 j之间的数字，不断地插入 j后面的位置（每在后面插入一次值，下次插入位置就向后加1）。最终就能得到一个 tandem repeats。注意一下输出格式。</p><p>示例：<br>1 3 1 2 2 3<br>1 3 1 <strong>3 3</strong> 2 2 3（<strong>在第二个 1后面插入 3 3</strong>，这时前面的1 3 1 3已经是 tandem repeats了）<br><del>1 3 1 3</del>  3 2 2 3 <strong>2 2</strong> （在第二个 3后面插入 2 2）<br><del>1 3 1 3</del>  3 2 2 3 2 <strong>2 2</strong> 2 （在上一次插入位置的下一位置插入 2 2）</p><p>这时整个数组已经是 tandem repeats了，能分为 3部分：[1 3 1 3] 、[3 2 2 3 2 2]、 [2 2]</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pdd pair<span class="string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;\tdebug:&quot;</span>&lt;&lt;a&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> for1(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> for2(i, b, a) for(int i = b; i &gt;= a; i--)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;<span class="type">char</span> ch = <span class="built_in">getchar</span>();ll f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f *= <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = x*<span class="number">10</span>+ch<span class="number">-48</span>; ch = <span class="built_in">getchar</span>();&#125; x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">10</span>) <span class="built_in">print</span>(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE </span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS;</span><br><span class="line">    <span class="built_in">slove</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> a[N];</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        for1(i, <span class="number">1</span>, n)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;a[i];</span><br><span class="line">            mp[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:mp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[i.first]&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">                f = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f) <span class="keyword">continue</span>;</span><br><span class="line">        vector&lt;pii&gt; ans;</span><br><span class="line">        ans.<span class="built_in">clear</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans2; </span><br><span class="line">        ans<span class="number">2.</span><span class="built_in">clear</span>();</span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">1</span>;</span><br><span class="line">        for1(i, <span class="number">1</span>, n)</span><br><span class="line">        &#123;</span><br><span class="line">            for1(j, i<span class="number">+1</span>, n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j] == a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    idx = j;</span><br><span class="line">                    for1(k, i<span class="number">+1</span>, j<span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        for2(x, n, idx<span class="number">+1</span>) a[x<span class="number">+2</span>] = a[x];</span><br><span class="line">                        n += <span class="number">2</span>;</span><br><span class="line">                        a[idx<span class="number">+1</span>] = a[idx<span class="number">+2</span>] = a[k];</span><br><span class="line">                        ans.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(idx, a[k]));</span><br><span class="line">                        idx++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans<span class="number">2.</span><span class="built_in">push_back</span>(idx-i<span class="number">+1</span>);</span><br><span class="line">                    i = idx;    <span class="comment">//后面有 i++</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x:ans) cout&lt;&lt;x.first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;x.second&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">size</span>() == <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;n/<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">            for1(i, <span class="number">1</span>, n/<span class="number">2</span>) cout&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;ans<span class="number">2.</span><span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i : ans2) cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ICPC——2021台湾站（A B C D E J）</title>
      <link href="/2022/01/14/ICPC%E2%80%94%E2%80%942021%E5%8F%B0%E6%B9%BE%E7%AB%99%EF%BC%88A%20B%20C%20D%20E%20J%EF%BC%89/"/>
      <url>/2022/01/14/ICPC%E2%80%94%E2%80%942021%E5%8F%B0%E6%B9%BE%E7%AB%99%EF%BC%88A%20B%20C%20D%20E%20J%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Olympic-Ranking"><a href="#A-Olympic-Ranking" class="headerlink" title="A - Olympic Ranking"></a>A - Olympic Ranking</h1><p><strong>题意</strong>：n支队伍，各有一定数量的金牌，银牌，铜牌。按照金牌 &gt; 银牌 &gt; 铜牌的优先级，找出最强的队伍。</p><p><strong>题解</strong>：题意简单，难点在于输入那个字符串。<br><strong>&lt;1&gt;</strong> 使用 getline和 string配合，然后输出的时候从第 1位输出而不是第 0位，会 wa12。<br><strong>&lt;2&gt;</strong> 我是手写了一个输入字符串的函数。<br><strong>&lt;3&gt;</strong> 我队友用的 map + tuple + string，也把代码附上，可以做个参考。（%%%</p><p><strong>代码</strong>：**&lt;2&gt;**</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getstr</span><span class="params">(<span class="type">char</span> s[], <span class="type">int</span> Lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch == <span class="string">&#x27; &#x27;</span>) ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != EOF &amp;&amp; i &lt; Lim)</span><br><span class="line">&#123;</span><br><span class="line">s[i++] = ch;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">s[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="type">char</span> s[<span class="number">310</span>][<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// IOS;</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i];</span><br><span class="line"><span class="built_in">getstr</span>(s[i], <span class="number">100000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span>((a[i] &gt; a[ans]) || (a[i] == a[ans] &amp;&amp; b[i] &gt; b[ans]) || (a[i] == a[ans] &amp;&amp; b[i] == b[ans] &amp;&amp; c[i] &gt; c[ans])) </span><br><span class="line">ans = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s[ans]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码：&lt;3&gt;</strong><br><img src="https://i-blog.csdnimg.cn/blog_migrate/a430a39de885103d36ab05010e372432.png" alt="在这里插入图片描述"></p><h1 id="B-Aliquot-Sum"><a href="#B-Aliquot-Sum" class="headerlink" title="B - Aliquot Sum"></a>B - Aliquot Sum</h1><p><strong>题意</strong>：求一个数的因子之和（除了自己本身），然后和自身比大小，对应输出三种字符串。</p><p><strong>题解</strong>：预处理一下即可。</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line">ll ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// IOS;</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1000010</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>*i; j &lt; <span class="number">1000010</span>; j += i)</span><br><span class="line">ans[j] += i;</span><br><span class="line"><span class="comment">// for(int i = 1; i &lt;= 20; i++) cout&lt;&lt;ans[i]&lt;&lt;endl;</span></span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x; cin&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(ans[x] &gt; x) cout&lt;&lt;<span class="string">&quot;abundant&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans[x] == x) cout&lt;&lt;<span class="string">&quot;perfect&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;deficient&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-A-Sorting-Problem"><a href="#C-A-Sorting-Problem" class="headerlink" title="C - A Sorting Problem"></a>C - A Sorting Problem</h1><p><strong>题意</strong>：给定一个数组，求逆序对数。</p><p><strong>题解</strong>：板子题，树状数组跑一遍即可。</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tree[N], f[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, idx;</span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = pos; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        tree[i] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = pos; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        res += tree[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i].x;</span><br><span class="line">a[i].idx = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a<span class="number">+1</span>, a+n<span class="number">+1</span>, cmp);</span><br><span class="line"></span><br><span class="line">f[a[<span class="number">1</span>].idx] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].x != a[i<span class="number">-1</span>].x) f[a[i].idx] = i;</span><br><span class="line"><span class="keyword">else</span> f[a[i].idx] = f[a[i<span class="number">-1</span>].idx];</span><br><span class="line">&#125;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">update</span>(f[i], <span class="number">1</span>);</span><br><span class="line">ans += i - <span class="built_in">ask</span>(f[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Drunk-Passenger"><a href="#D-Drunk-Passenger" class="headerlink" title="D - Drunk Passenger"></a>D - Drunk Passenger</h1><p><strong>题意</strong>：n个人按照先后顺序上飞机坐座位，第一个人喝醉了，所以他会等可能地坐到除了自己位置之外的位置上。剩下的乘客，如果自己的位置被占了，就会等可能的坐到其他位置上，否则坐自己的位置。求最后一个人做对位置的概率。</p><p><strong>题解</strong>：【醉汉、1、2、3 ……n-2、最后一个人】 分两种大情况：</p><p><strong>&lt;1&gt;</strong> <strong>醉汉先坐你的位置（$1&#x2F;(n-1)$）</strong><br>那么最后一个人坐错位置的概率为 $1*(1&#x2F;(n-1))$ &#x3D; $1&#x2F;(n-1)$，则坐对位置的概率也为$1&#x2F;(n-1)$。</p><p><strong>&lt;2&gt;</strong> <strong>醉汉坐其他人的位置 ( $(n-2)&#x2F;(n-1)$ )</strong><br>假如醉汉坐到了第 x个人的位置，那么从第 2个到第 x-1个人都会坐到自己的位置上。然后剩下的位置第 x个人都可以坐。<br>或者说情况就变成了：一共 m个人，m个位置(m &#x3D; n-x+1)，每个人都等概率坐任意位置(但还保持那种坐自己位置的特性)。那么最后一个人坐到最后一个位置上的概率就是 1&#x2F;2（这是个经典的醉汉问题，或者说疯子问题，这里挂一个知乎的链接，就是关于这个问题的若干个解释，不再给出证明<a href="https://www.zhihu.com/question/35950050">知乎醉汉上飞机问题链接</a>）</p><p>这种情况下，最后一个人坐对位置的概率就是$(1&#x2F;2) * ((n-2)&#x2F;(n-1))$</p><p>那么两种情况相加一下，就是 $1&#x2F;(n-1)$ + $(1&#x2F;2) * ((n-2)&#x2F;(n-1))$ &#x3D;  $n&#x2F;(2*(n-1))$</p><p><strong>代码</strong>： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line"><span class="type">double</span> ans = <span class="number">1.0</span>*n/(<span class="number">2</span>*(n<span class="number">-1</span>));</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Eatcoin"><a href="#E-Eatcoin" class="headerlink" title="E - Eatcoin"></a>E - Eatcoin</h1><p><strong>题意</strong>：简单地说，在第 d天，花费 p块钱，生产 $q*d^5$块钱。 生产到 $10^{99}$ 块钱算富豪。每天必须先花费 p块钱才能生产。求开始时最少需要有多少钱，以及在开始时有需要的最少钱的情况下，最少需要多少天才能变成富豪。</p><p><strong>题解</strong>：首先要推出 $1^5 + 2^5 + 3^5 + …+n^5$的公式为：$(n^2*(n+1)^2*(2n^2 + 2n-1)) &#x2F; 12$<br>用那个组合数的公式应该也可以（<a href="https://blog.csdn.net/update7/article/details/79953240?ops_request_misc=&request_id=&biz_id=102&utm_term=1%5E5%20%20%202%5E5%20%20%203%5E5&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-79953240.pc_search_result_control_group&spm=1018.2226.3001.4187">公式证明链接</a>）</p><p>&lt;1&gt; 求开始最少需要多少钱<br>刚开始花的钱的多，之后生产的钱多。假如到第 x天，生产的钱的总和大于等于花费的钱的总和。<strong>所以答案为，前x-1天花费总数 - 前x-1天生产总数 + 第 x天的花费</strong></p><p>&lt;2&gt; 求最少需要多少天<br>列出求手上钱的总数的式子，然后<strong>二分天数</strong>即可。</p><p><strong>代码</strong>：（python版本， c++版本的大数写的一直有问题，还在debug）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">n, p, q, x</span>):</span><br><span class="line">    <span class="keyword">return</span> q*(n*n)*(n+<span class="number">1</span>)*(n+<span class="number">1</span>)*(<span class="number">2</span>*n*n+<span class="number">2</span>*n-<span class="number">1</span>)//<span class="number">12</span> - p*n + x</span><br><span class="line"></span><br><span class="line">p, q = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">last = p - q</span><br><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    now = i*p-q*(i*i)*(i+<span class="number">1</span>)*(i+<span class="number">1</span>)*(<span class="number">2</span>*i*i+<span class="number">2</span>*i-<span class="number">1</span>)//<span class="number">12</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> now &gt;= last:</span><br><span class="line">        last = now</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(last+p)    <span class="comment">#下一次需要先消耗</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">l = <span class="number">1</span></span><br><span class="line">r = <span class="number">10</span>**<span class="number">100</span></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">x = last+p  <span class="comment"># 不要x也能过，答案太大，x没影响？</span></span><br><span class="line"><span class="keyword">while</span> l &lt;= r:</span><br><span class="line">    mid = (l+r)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> cal(mid, p, q, x) &lt; <span class="number">10</span>**<span class="number">99</span>:</span><br><span class="line">        l = mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = mid-<span class="number">1</span></span><br><span class="line">        ans = mid</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="J-JavaScript"><a href="#J-JavaScript" class="headerlink" title="J - JavaScript"></a>J - JavaScript</h1><p><strong>题意</strong>：模拟 javascript的减法运算。给定两个字符串a b，如果字符串中存在非数字的元素，输出 NaN。否则将两个字符串转为数字，进行相减运算。</p><p><strong>题解</strong>：简单模拟即可。（0对应的 ASCLL值为 48）</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// IOS;</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line">string a, b; cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="type">bool</span> falg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) </span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isdigit</span>(a[i]))</span><br><span class="line">falg = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) </span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isdigit</span>(b[i]))</span><br><span class="line">falg = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(falg) cout&lt;&lt;<span class="string">&quot;NaN&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) ans1 = ans1*<span class="number">10</span> + a[i] - <span class="number">48</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) ans2 = ans2*<span class="number">10</span> + b[i] - <span class="number">48</span>;</span><br><span class="line">cout&lt;&lt;ans1-ans2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 764 (Div. 3)（A B C D E F G）</title>
      <link href="/2022/01/11/Codeforces%20Round%20764%20(Div.%203)%EF%BC%88A%20B%20C%20D%20E%20F%20G%EF%BC%89/"/>
      <url>/2022/01/11/Codeforces%20Round%20764%20(Div.%203)%EF%BC%88A%20B%20C%20D%20E%20F%20G%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Plus-One-on-the-Subset"><a href="#A-Plus-One-on-the-Subset" class="headerlink" title="A - Plus One on the Subset"></a>A - Plus One on the Subset</h1><p><strong>题意</strong>：给定一个数组，你每次可以选择任意位置任意数量的数字加1，问需要几次能把数组所有的元素变成同样大小。</p><p><strong>题解</strong>：最小的元素变成最大的元素的次数就是答案，其他的元素在这个过程中就也能变成最大的。</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> maxx = -inf, minn = inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x; cin&gt;&gt;x;</span><br><span class="line">maxx = <span class="built_in">max</span>(maxx, x);</span><br><span class="line">minn = <span class="built_in">min</span>(minn, x);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;maxx-minn&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="B-Make-AP"><a href="#B-Make-AP" class="headerlink" title="B - Make AP"></a>B - Make AP</h1><p><strong>题意</strong>：给定三个数，你可以任意选择一个，乘以m（m &gt; 0），如果操作之后的序列满足等差数列，输出 YES，否则输出 NO。</p><p><strong>题解</strong>：分类讨论一下即可，<strong>注意乘以 m之后的那个数要大于0</strong></p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">ll a, b, c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">ll d1 = c - a;</span><br><span class="line"><span class="keyword">if</span>((c-a)%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ll bb = a + (c-a)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(bb%b == <span class="number">0</span> &amp;&amp; bb &gt; <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="comment">// debug(bb);</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll d2 = c - b;</span><br><span class="line">ll aa = b - (c-b);</span><br><span class="line"><span class="keyword">if</span>(aa%a == <span class="number">0</span> &amp;&amp; aa &gt; <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="comment">// debug(aa);</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll d3 = b - a;</span><br><span class="line">ll cc = b+(b-a);</span><br><span class="line"><span class="keyword">if</span>(cc%c == <span class="number">0</span> &amp;&amp; cc &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="comment">// debug(cc);</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="C-Division-by-Two-and-Permutation"><a href="#C-Division-by-Two-and-Permutation" class="headerlink" title="C - Division by Two and Permutation"></a>C - Division by Two and Permutation</h1><p><strong>题意</strong>：给定一个长度为 n的数组，你可以任意次将数组中的数除以2（向下取整），如果数组元素可以变成 1 2 3 … n,输出YES，否则输出NO。</p><p><strong>题解</strong>：先把大于 n的数，向下取整直到小于等于 n。用 map先记录此时数组每个元素对应的<br> 1到 n。然后从大往小遍历，如果数 x对应的 mp[x]大于1，x用一个，把多余的分给 x&#x2F;2。(具体看代码)</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], vis[N];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">mp.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">while</span>(a[i] &gt; n) a[i]&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">mp[a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(mp[i] &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mp[i]--;</span><br><span class="line">mp[i/<span class="number">2</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="D-Palindromes-Coloring"><a href="#D-Palindromes-Coloring" class="headerlink" title="D - Palindromes Coloring"></a>D - Palindromes Coloring</h1><p><strong>题意</strong>：给定一个字符串，k种颜色，然后给字符串染色。每种颜色至少用 1次，但可以不把所有字符都染色。染色之后把相同颜色的字符当作一组，可以组内任意交换位置，保证每组都为回文串。求长度最短的一组的最大长度（尽可能保证均分就长度最大。</p><p><strong>题解</strong>：统计一下一共有几对相同的字符。然后均分给 k组，然后统计剩余的单个字符个数（包括没用到的成对字符），如果大于 k，就每组都再分一个字符（放中间还是回文串）。</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp, vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, k; cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">string s; cin&gt;&gt;s;</span><br><span class="line">mp.<span class="built_in">clear</span>();</span><br><span class="line">vis.<span class="built_in">clear</span>();</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) mp[s[i]]++;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[s[i]])</span><br><span class="line">&#123;</span><br><span class="line">vis[s[i]] = <span class="number">1</span>;</span><br><span class="line">ans += mp[s[i]]/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt = len-(ans - ans%k)*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt &gt;= k) cout&lt;&lt;(ans/k)*<span class="number">2</span><span class="number">+1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;(ans/k)*<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="E-Masha-forgetful"><a href="#E-Masha-forgetful" class="headerlink" title="E - Masha-forgetful"></a>E - Masha-forgetful</h1><p>先占个坑一会码）</p><h1 id="F-Interacdive-Problem"><a href="#F-Interacdive-Problem" class="headerlink" title="F - Interacdive Problem"></a>F - Interacdive Problem</h1><p>先占个坑一会码）</p><h1 id="G-MinOr-Tree"><a href="#G-MinOr-Tree" class="headerlink" title="G - MinOr Tree"></a>G - MinOr Tree</h1><p>先占个坑一会码）</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>板子——二分图最佳完美匹配（KM ）O(n^3)</title>
      <link href="/2022/01/09/%E6%9D%BF%E5%AD%90%E2%80%94%E2%80%94%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E4%BD%B3%E5%AE%8C%E7%BE%8E%E5%8C%B9%E9%85%8D%EF%BC%88KM%20%EF%BC%89O(n%5E3)/"/>
      <url>/2022/01/09/%E6%9D%BF%E5%AD%90%E2%80%94%E2%80%94%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E4%BD%B3%E5%AE%8C%E7%BE%8E%E5%8C%B9%E9%85%8D%EF%BC%88KM%20%EF%BC%89O(n%5E3)/</url>
      
        <content type="html"><![CDATA[<p>先存板子，后面再写讲解</p><p>模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">ll w[N][N]; <span class="comment">// 边权</span></span><br><span class="line">ll la[N], lb[N], upd[N]; <span class="comment">// 左、右部点的顶标</span></span><br><span class="line"><span class="type">bool</span> va[N], vb[N]; <span class="comment">// 访问标记：是否在交错树中</span></span><br><span class="line">ll match[N]; <span class="comment">// 右部点匹配了哪一个左部点</span></span><br><span class="line">ll last[N]; <span class="comment">// 右部点在交错树中的上一个右部点，用于倒推得到交错路</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(ll x, ll fa)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    va[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">1</span>; y &lt;= n; y++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span>(!vb[y])</span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">if</span>(la[x] + lb[y] == w[x][y]) </span><br><span class="line">&#123; </span><br><span class="line">                vb[y] = <span class="number">1</span>; last[y] = fa;</span><br><span class="line">                <span class="keyword">if</span>(!match[y] || <span class="built_in">dfs</span>(match[y], y)) </span><br><span class="line">&#123;</span><br><span class="line">                    match[y] = x;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(upd[y] &gt; la[x] + lb[y] - w[x][y]) </span><br><span class="line">&#123;</span><br><span class="line">                upd[y] = la[x] + lb[y] - w[x][y];</span><br><span class="line">                last[y] = fa;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">KM</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line">        la[i] = -infll;</span><br><span class="line">        lb[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) la[i] = <span class="built_in">max</span>(la[i], w[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">memset</span>(va, <span class="number">0</span>, <span class="built_in">sizeof</span>(va));</span><br><span class="line">        <span class="built_in">memset</span>(vb, <span class="number">0</span>, <span class="built_in">sizeof</span>(vb));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) upd[j] = infll;</span><br><span class="line">        <span class="comment">// 从右部点st匹配的左部点match[st]开始dfs，一开始假设有一条0-i的匹配</span></span><br><span class="line">        <span class="type">int</span> st = <span class="number">0</span>; match[<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">while</span>(match[st]) <span class="comment">// 当到达一个非匹配点st时停止</span></span><br><span class="line">&#123; </span><br><span class="line">            ll delta = infll;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(match[st], st)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">if</span>(!vb[j] &amp;&amp; delta &gt; upd[j]) </span><br><span class="line">&#123;</span><br><span class="line">                    delta = upd[j];</span><br><span class="line">                    st = j; <span class="comment">// 下一次直接从最小边开始DFS</span></span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)  <span class="comment">// 修改顶标</span></span><br><span class="line">&#123;</span><br><span class="line">                <span class="keyword">if</span>(va[j]) la[j] -= delta;</span><br><span class="line">                <span class="keyword">if</span>(vb[j]) lb[j] += delta; </span><br><span class="line"><span class="keyword">else</span> upd[j] -= delta;</span><br><span class="line">            &#125;</span><br><span class="line">            vb[st] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(st)<span class="comment">// 倒推更新增广路 </span></span><br><span class="line">&#123; </span><br><span class="line">            match[st] = match[last[st]];</span><br><span class="line">            st = last[st];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line"><span class="keyword">if</span>(match[i]) </span><br><span class="line">ans += w[match[i]][i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 根据题目求出 w[][]数组，然后使用KM即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ICPC——2019南京站（A C H J K）</title>
      <link href="/2022/01/08/ICPC%E2%80%94%E2%80%942019%E5%8D%97%E4%BA%AC%E7%AB%99%EF%BC%88A%20C%20H%20J%20K%EF%BC%89/"/>
      <url>/2022/01/08/ICPC%E2%80%94%E2%80%942019%E5%8D%97%E4%BA%AC%E7%AB%99%EF%BC%88A%20C%20H%20J%20K%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="A-A-Hard-Problem"><a href="#A-A-Hard-Problem" class="headerlink" title="A - A Hard Problem"></a>A - A Hard Problem</h1><p><strong>题意</strong>：从 {1,2,⋯,n}中任意选择长度为 k的子集， 保证存在两个数 a, b，a是b的因子。求出最小的 k值。</p><p><strong>题解</strong>：规律题 k &#x3D; (n+3)&#x2F;2<br>n &#x3D; 2 3 4 5 6 7 8 9  …<br>k &#x3D; 2 3 3 4 4 5 5 6  …</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;(n<span class="number">+3</span>)/<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="C-Digital-Path"><a href="#C-Digital-Path" class="headerlink" title="C - Digital Path"></a>C - Digital Path</h1><p><strong>题意</strong>：给定一个 n*m的数字矩阵，从入度为 0的点开始，向上下左右四个方向且增值为 1的方向走，求所有长度大于等于 4的路径数。<br>答案为 4的示例：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/c18db88333b51abba2a84c59f85adc8e.png"><br><strong>题解</strong>：从入度为 0的点向四周搜索，用 dp[i][j][x]代表到点 (i,j)的路径长度为 x的路径数，特别说明 dp[i][j][4]代表路径长度大于等于4的路径数。<br>递推方程：<br>dp[xx][yy][k] +&#x3D; dp[x][y][k-1]  (2&lt;k&lt;4)<br>dp[xx][yy][4] +&#x3D; dp[x][y][3] + dp[x][y][4] </p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N], in[N][N], out[N][N], vis[N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dp[N][N][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!in[i][j])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(i, j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = q.<span class="built_in">front</span>().first, y = q.<span class="built_in">front</span>().second;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> xx = x + dx[k], yy = y + dy[k];</span><br><span class="line"><span class="keyword">if</span>(xx &lt; <span class="number">1</span> || xx &gt; n || yy &lt; <span class="number">1</span> || yy &gt; m) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(g[x][y]<span class="number">+1</span> == g[xx][yy])</span><br><span class="line">&#123;</span><br><span class="line">(dp[xx][yy][<span class="number">2</span>] += dp[x][y][<span class="number">1</span>]) %= mod;</span><br><span class="line">(dp[xx][yy][<span class="number">3</span>] += dp[x][y][<span class="number">2</span>]) %= mod;</span><br><span class="line">(dp[xx][yy][<span class="number">4</span>] += dp[x][y][<span class="number">3</span>] + dp[x][y][<span class="number">4</span>]) %= mod;</span><br><span class="line"><span class="keyword">if</span>(--in[xx][yy] == <span class="number">0</span>) q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(xx, yy));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">cin&gt;&gt;g[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = i+dx[k], y = j+dy[k];</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(g[i][j] == g[x][y]<span class="number">-1</span>) out[i][j]++;</span><br><span class="line"><span class="keyword">if</span>(g[i][j] == g[x][y]<span class="number">+1</span>) in[i][j]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>();</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!out[i][j]) (ans += dp[i][j][<span class="number">4</span>]) %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="H-Prince-and-Princess"><a href="#H-Prince-and-Princess" class="headerlink" title="H - Prince and Princess"></a>H - Prince and Princess</h1><p><strong>题意</strong>：你要在 n个房间中找到公主在哪，每个房间有一个人，他们彼此知道谁在哪个房间。你可以每次问任意一个房间里的人三个问题之一：<br>1、你的名字是什么？<br>2、在第 x个房间里的人的名字是什么？<br>3、公主在哪个房间？</p><p>这n个人可以分为三类：一类一定说真话；一类一定说假话；一类可能说真话可能说假话。你知道这三类人的人数分别为 a,b,c，求能否通过问若干个问题，<strong>保证一定能</strong>找到公主在哪，如果能，输出YES和最少需要的问题数；如果不能，输出NO。</p><p><strong>题解</strong>：既然要保证能找到，所以就分析<strong>最坏的请况</strong>：第三类人全说的谎话。然后先问了(b+c)次第三个问题，全是错的（把错的全问完）， 然后再问 (b+c+1)次问题， 全是正确的，这样就<strong>刚好能确定</strong>公主的位置（正确的 &gt; 错误的），这种情况只有在 a &gt; b+c时才可能发生，答案为 2*(b+c)+1。<br><strong>还有一个重要的点：</strong>公主在房间中****。所以 a &#x3D; 1 b &#x3D; 0 c &#x3D; 0时，那个人就是公主。</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> a, b, c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b+c) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl&lt;&lt;<span class="number">2</span>*(b+c)<span class="number">+1</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="J-Spy"><a href="#J-Spy" class="headerlink" title="J - Spy"></a>J - Spy</h1><p><strong>题意</strong>：你和我要打架，我有一队人 n个，武力值为 a[]，赏金为 p[]。你有两队人 2n个，武力值为 b[]和 c[]，现在你要把两队人合并为一队（两两配对），新武力值为本来两人之和。每个人只能战斗一次。<br>你的人打赢我的人，就获得相应的赏金，战斗随机，求你得到的赏金的<strong>期望值乘以n</strong>。</p><p><strong>题解</strong>：把队伍 b[] 和 c[]当作二部图，边的权值为这对组合能获得的赏金之和。然后跑一遍KM。最佳匹配的边的权值之和即为答案。 <strong>n&lt;400， <strong>用O($n^3$)的KM算法</strong></strong></p><p><strong>链接</strong>：<a href="https://blog.csdn.net/m0_53318671/article/details/122395655?spm=1001.2014.3001.5501">$O(n^3)$的KM模板</a></p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">ll w[N][N]; </span><br><span class="line">ll la[N], lb[N], upd[N]; </span><br><span class="line"><span class="type">bool</span> va[N], vb[N]; </span><br><span class="line">ll match[N]; </span><br><span class="line">ll last[N]; </span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">ll a[N], p[N], b[N], c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(ll x, ll fa)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    va[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">1</span>; y &lt;= n; y++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span>(!vb[y])</span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">if</span>(la[x] + lb[y] == w[x][y]) </span><br><span class="line">&#123; </span><br><span class="line">                vb[y] = <span class="number">1</span>; last[y] = fa;</span><br><span class="line">                <span class="keyword">if</span>(!match[y] || <span class="built_in">dfs</span>(match[y], y)) </span><br><span class="line">&#123;</span><br><span class="line">                    match[y] = x;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(upd[y] &gt; la[x] + lb[y] - w[x][y]) </span><br><span class="line">&#123;</span><br><span class="line">                upd[y] = la[x] + lb[y] - w[x][y];</span><br><span class="line">                last[y] = fa;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">KM</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line">        la[i] = -infll;<span class="comment">// !!!</span></span><br><span class="line">        lb[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) la[i] = <span class="built_in">max</span>(la[i], w[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">memset</span>(va, <span class="number">0</span>, <span class="built_in">sizeof</span>(va));</span><br><span class="line">        <span class="built_in">memset</span>(vb, <span class="number">0</span>, <span class="built_in">sizeof</span>(vb));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) upd[j] = infll;<span class="comment">// !!!</span></span><br><span class="line">       </span><br><span class="line">        <span class="type">int</span> st = <span class="number">0</span>; match[<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">while</span>(match[st]) </span><br><span class="line">&#123; </span><br><span class="line">            ll delta = infll; <span class="comment">// !!!</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(match[st], st)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">if</span>(!vb[j] &amp;&amp; delta &gt; upd[j]) </span><br><span class="line">&#123;</span><br><span class="line">                    delta = upd[j];</span><br><span class="line">                    st = j; </span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)  </span><br><span class="line">&#123;</span><br><span class="line">                <span class="keyword">if</span>(va[j]) la[j] -= delta;</span><br><span class="line">                <span class="keyword">if</span>(vb[j]) lb[j] += delta; </span><br><span class="line"><span class="keyword">else</span> upd[j] -= delta;</span><br><span class="line">            &#125;</span><br><span class="line">            vb[st] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(st)</span><br><span class="line">&#123; </span><br><span class="line">            match[st] = match[last[st]];</span><br><span class="line">            st = last[st];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line"><span class="keyword">if</span>(match[i]) ans += w[match[i]][i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IOS;</span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin&gt;&gt;p[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin&gt;&gt;b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin&gt;&gt;c[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">ll sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line"><span class="keyword">if</span>(a[k] &lt; b[i]+c[j]) sum += p[k];</span><br><span class="line">w[i][j] = sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">KM</span>()&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="K-Triangle"><a href="#K-Triangle" class="headerlink" title="K - Triangle"></a>K - Triangle</h1><p><strong>题意</strong>：给定一个三角形ABC的三个顶点，再给定一个点 p，求另一个点 x的坐标，使得 px的连线平分三角形ABC的面积。假如点 p不在三角形的边上就不合法，输出 -1。</p><p><strong>题解</strong>：分类讨论 + 二分（也可以通过解方程求）。分类在于，先判断点 p在哪条边上，然后通过点 p离所在边的两个端点的距离大小，判断点 x在对面的哪一条边上。对每一类，二分点 x所在的边，通过面积关系做判断依据，找到点 x的坐标。<br><strong>注意交版本低一点的</strong>，例如G++14能过，但G++20过不了。</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infll 1e15+7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0); cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(a) cout&lt;&lt;<span class="string">&quot;*****\tdebug: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;\t*****&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span> + <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">sqr</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="built_in">Point</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">double</span> _x,<span class="type">double</span> _y)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Point <span class="keyword">operator</span> -(<span class="type">const</span> Point &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span> ^(<span class="type">const</span> Point &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y - y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点积</span></span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span> *(<span class="type">const</span> Point &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.x + y*b.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回两点的距离</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">distance</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hypot</span>(x-p.x,y-p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> +(<span class="type">const</span> Point &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x+b.x,y+b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> *(<span class="type">const</span> <span class="type">double</span> &amp;k)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x*k,y*k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span>&#123;</span><br><span class="line">    Point s,e;</span><br><span class="line">    <span class="built_in">Line</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Line</span>(Point _s,Point _e)&#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点在线段上的判断</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pointonseg</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>((p-s)^(e-s)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((p-s)*(p-e)) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">mid_</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a+b)*<span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">(Point a, Point b, Point c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fabs</span>((b - a) ^ (c - a) * <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// IOS;</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------------------</span></span><br><span class="line">Point a, b, c ,p;</span><br><span class="line">Line ab, ac, bc;</span><br><span class="line"><span class="type">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">a.<span class="built_in">input</span>();</span><br><span class="line">b.<span class="built_in">input</span>();</span><br><span class="line">c.<span class="built_in">input</span>();</span><br><span class="line">p.<span class="built_in">input</span>();</span><br><span class="line">ab = <span class="built_in">Line</span>(a, b);</span><br><span class="line">ac = <span class="built_in">Line</span>(a, c);</span><br><span class="line">bc = <span class="built_in">Line</span>(b, c);</span><br><span class="line"><span class="keyword">if</span>(!ab.<span class="built_in">pointonseg</span>(p) &amp;&amp; !bc.<span class="built_in">pointonseg</span>(p) &amp;&amp; !ac.<span class="built_in">pointonseg</span>(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cout&lt;&lt;-1&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> s = <span class="built_in">area</span>(a, b, c)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(ab.<span class="built_in">pointonseg</span>(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p.<span class="built_in">distance</span>(a) &lt; p.<span class="built_in">distance</span>(b))</span><br><span class="line">&#123;</span><br><span class="line">Point l = b, r = c;</span><br><span class="line">Point mid;</span><br><span class="line"><span class="type">int</span> x = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">while</span>(x--)</span><br><span class="line">&#123;</span><br><span class="line">mid = <span class="built_in">mid_</span>(l, r);</span><br><span class="line"><span class="type">double</span> ss = <span class="built_in">area</span>(p, mid, b);</span><br><span class="line"><span class="type">int</span> flag = <span class="built_in">sgn</span>(ss-s);</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span>)r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf %.10lf\n&quot;</span>, mid.x, mid.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Point l = a, r = c;</span><br><span class="line">Point mid;</span><br><span class="line"><span class="type">int</span> x = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">while</span>(x--)</span><br><span class="line">&#123;</span><br><span class="line">mid = <span class="built_in">mid_</span>(l, r);</span><br><span class="line"><span class="type">double</span> ss = <span class="built_in">area</span>(p, mid, a);</span><br><span class="line"><span class="type">int</span> flag = <span class="built_in">sgn</span>(ss-s);</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span>)r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf %.10lf\n&quot;</span>, mid.x, mid.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ac.<span class="built_in">pointonseg</span>(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p.<span class="built_in">distance</span>(a) &lt; p.<span class="built_in">distance</span>(c))</span><br><span class="line">&#123;</span><br><span class="line">Point l = c, r = b;</span><br><span class="line">Point mid;</span><br><span class="line"><span class="type">int</span> x = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">while</span>(x--)</span><br><span class="line">&#123;</span><br><span class="line">mid = <span class="built_in">mid_</span>(l, r);</span><br><span class="line"><span class="type">double</span> ss = <span class="built_in">area</span>(p, mid, c);</span><br><span class="line"><span class="type">int</span> flag = <span class="built_in">sgn</span>(ss-s);</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span>)r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf %.10lf\n&quot;</span>, mid.x, mid.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Point l = a, r = b;</span><br><span class="line">Point mid;</span><br><span class="line"><span class="type">int</span> x = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">while</span>(x--)</span><br><span class="line">&#123;</span><br><span class="line">mid = <span class="built_in">mid_</span>(l, r);</span><br><span class="line"><span class="type">double</span> ss = <span class="built_in">area</span>(p, mid, a);</span><br><span class="line"><span class="type">int</span> flag = <span class="built_in">sgn</span>(ss-s);</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span>)r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf %.10lf\n&quot;</span>, mid.x, mid.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p.<span class="built_in">distance</span>(b) &lt; p.<span class="built_in">distance</span>(c))</span><br><span class="line">&#123;</span><br><span class="line">Point l = c, r = a;</span><br><span class="line">Point mid;</span><br><span class="line"><span class="type">int</span> x = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">while</span>(x--)</span><br><span class="line">&#123;</span><br><span class="line">mid = <span class="built_in">mid_</span>(l, r);</span><br><span class="line"><span class="type">double</span> ss = <span class="built_in">area</span>(p, mid, c);</span><br><span class="line"><span class="type">int</span> flag = <span class="built_in">sgn</span>(ss-s);</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span>)r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf %.10lf\n&quot;</span>, mid.x, mid.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Point l = b, r = a;</span><br><span class="line">Point mid;</span><br><span class="line"><span class="type">int</span> x = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">while</span>(x--)</span><br><span class="line">&#123;</span><br><span class="line">mid = <span class="built_in">mid_</span>(l, r);</span><br><span class="line"><span class="type">double</span> ss = <span class="built_in">area</span>(p, mid, b);</span><br><span class="line"><span class="type">int</span> flag = <span class="built_in">sgn</span>(ss-s);</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span>)r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf %.10lf\n&quot;</span>, mid.x, mid.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 755 Div. 2（A B C D）</title>
      <link href="/2021/11/21/Codeforces%20Round%20755%20Div.%202%EF%BC%88A%20B%20C%20D%EF%BC%89/"/>
      <url>/2021/11/21/Codeforces%20Round%20755%20Div.%202%EF%BC%88A%20B%20C%20D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Mathematical-Addition"><a href="#A-Mathematical-Addition" class="headerlink" title="A. Mathematical Addition"></a>A. Mathematical Addition</h1><p>题意:给定两个数字u, v，求满足$\frac{x}{u}+\frac{y}{v}&#x3D;\frac{x+y}{u+v}$的x, y（$x\neq0,y\neq0$）</p><p>思路：两边同时乘以uv(u+v)，化简一下就能得到 $x&#x3D;-u^2,y&#x3D;v^2$</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b; cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        cout&lt;&lt;(ll)-a*a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(ll)b*b&lt;&lt;endl;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="B-Coloring-Rectangles"><a href="#B-Coloring-Rectangles" class="headerlink" title="B. Coloring Rectangles"></a>B. Coloring Rectangles</h1><p>题意：给定一个$n<em>m$的红色矩阵，可以任意划分为大于$1</em>1$的小矩阵，然后在每个小矩阵中将一部分格子染为蓝色，使得红蓝相间。求最小蓝色数量。</p><p>思路：$1<em>3$的两红一蓝是最优的，红蓝比为2:1。所以若能全分为$1</em>3$就最优，为$n<em>m&#x2F;3$，否则为$n</em>m&#x2F;3+1$。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n, m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">if</span>(!(n%<span class="number">3</span>) || !(m%<span class="number">3</span>)) cout&lt;&lt;(ll)n*m/<span class="number">3</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;(ll)n*m/<span class="number">3</span><span class="number">+1</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="C-Two-Arrays"><a href="#C-Two-Arrays" class="headerlink" title="C. Two Arrays"></a>C. Two Arrays</h1><p>题意：给定两个数组a, b。可以在a数组中选取一段连续的区间，让这个区间的元素都加1。每个元素只能被选择一次。问a数组经过变换后能否和b数组相同。</p><p>思路：排个序，比较两个数组对应位置的元素，当他们的差值全部小于等于1就说明可以相同，注意a[i]不能大于b[i] （因为只能a数组元素加1，不能是b数组元素加1，刚开始我这里就wa了）</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">111</span>], b[<span class="number">111</span>], aa[<span class="number">111</span>], bb[<span class="number">111</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin&gt;&gt;b[i];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(a<span class="number">+1</span>, a+n<span class="number">+1</span>);</span><br><span class="line">        <span class="built_in">sort</span>(b<span class="number">+1</span>, b+n<span class="number">+1</span>);</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i]-b[i]) &gt; <span class="number">1</span> || a[i] &gt; b[i])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;(flag == <span class="number">0</span> ? <span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="D-Guess-the-Permutation"><a href="#D-Guess-the-Permutation" class="headerlink" title="D. Guess the Permutation"></a>D. Guess the Permutation</h1><p>题意：给出数组的长度n，在数组中选择三个位置i , j , k ，翻转数组[ i , j−1 ] , [ j , k ]的元素。每次可以询问一段区间 [l, r] 里逆序对的个数，在最多40次询问里求出i , j , k。（交互题）</p><p>思路：二分</p><p><strong>！！！！</strong>思路一<strong>！！！！</strong><br><strong>确定 i</strong><br>逆序对数为0的最长区间就是 [1, i ]，可以确定左区间为1，二分找右区间 i，需要$log_2^{1e9}$次（最多30次）</p><p><strong>确定 j</strong><br>先给公式：<strong>j &#x3D; i + (ask(i, n) - ask(i+1, n) + 1)</strong><br>再证明（举栗子)<br>假设原数组：1 2 3 4 5 6 7 8<br>翻转后数组：1 5 4 3 2 7 6 8    ( 所以5的下标为 i, 4的下标为 i+1, 6的下标为 j)<br>具体看这一段区间：<br>5 4 3 2    &ensp;&ensp;&ensp;&ensp;逆序对个数为 6<br>&ensp; 4 3 2  &ensp;&ensp;&ensp;&ensp;逆序对个数为 3<br>可以得到：<strong>（ask(i, n) - ask(i+1, n) + 1） &#x3D; 区间长度</strong><br>则:   <strong>j &#x3D; i +  区间长度</strong></p><p><strong>确定k</strong><br>和确定 j 的道理相同：<strong>k &#x3D; j + ask(j, n) - ask(j+1, n)</strong><br>（最终一共最多查询34次）</p><p><strong>！！！！</strong>思路二<strong>！！！！</strong><br>方法和思路一差不多，只是先确定 k， 再确定 j, i 。（i, j, k之间的推导式也要变）这里给出代码，就不再做解释了（补济南站去）。</p><p>代码：<br><strong>思路一</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(ll l, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    cout.<span class="built_in">flush</span>();</span><br><span class="line">    cin&gt;&gt;ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n; cin&gt;&gt;n;</span><br><span class="line">        ll l = <span class="number">1</span>, r = n, i, j, k;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">ask</span>(<span class="number">1</span>, mid) &gt; <span class="number">0</span>) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid<span class="number">+1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i = l<span class="number">-1</span>;</span><br><span class="line">        j = i + <span class="built_in">ask</span>(i, n) - <span class="built_in">ask</span>(i<span class="number">+1</span>, n) + <span class="number">1</span>;</span><br><span class="line">        k = j + <span class="built_in">ask</span>(j, n) - <span class="built_in">ask</span>(j<span class="number">+1</span>, n);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;! &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;k&lt;&lt;endl;</span><br><span class="line">        cout.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>思路二</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;ll, ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(ll l, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    cout.<span class="built_in">flush</span>();</span><br><span class="line">    cin&gt;&gt;ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n; cin&gt;&gt;n;</span><br><span class="line">        ll l = <span class="number">1</span>, r = n, i, j, k;</span><br><span class="line">        ll cnt = <span class="built_in">ask</span>(<span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">ask</span>(<span class="number">1</span>, mid) == cnt) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid<span class="number">+1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">ask</span>(<span class="number">1</span>, l<span class="number">-1</span>) == cnt) k = l<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> k = r;</span><br><span class="line">        j = k - cnt + <span class="built_in">ask</span>(<span class="number">1</span>, k<span class="number">-1</span>);</span><br><span class="line">        i = j - (ll)<span class="built_in">sqrt</span>(<span class="built_in">ask</span>(<span class="number">1</span>, j<span class="number">-1</span>)*<span class="number">2</span>) - <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;! &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;k&lt;&lt;endl;</span><br><span class="line">        cout.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 726 (Div. 2)（A B C D E F）</title>
      <link href="/2021/11/16/Codeforces%20Round%20726%20(Div.%202)%EF%BC%88A%20B%20C%20D%20E%20F%EF%BC%89/"/>
      <url>/2021/11/16/Codeforces%20Round%20726%20(Div.%202)%EF%BC%88A%20B%20C%20D%20E%20F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Arithmetic-Array"><a href="#A-Arithmetic-Array" class="headerlink" title="A-Arithmetic Array"></a>A-Arithmetic Array</h1><p>题意：给定一个数组，一次可以给数组增加一个非负的元素，问最少需要增加多少次，可以使数组满足：数组元素之和等于数组的长度</p><p>思路：枚举初始给定数组之和。<br>    若小于数组长度，则再增加一个整数即可（肯定存在这样的一个正数）；<br>    若等于数组长度，则不用添加元素；<br>    若大于数组长度，则需要添加（数组之和减数组长度）个0.</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">        ll sum = <span class="number">0</span>, ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x; cin&gt;&gt;x;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &lt; n) ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum == n) ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> ans = sum-n;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Bad-Boy"><a href="#B-Bad-Boy" class="headerlink" title="B-Bad Boy"></a>B-Bad Boy</h1><p>题意：一个人站在n×m的方格中（x, y）处，让你在方格中挑选两个位置放置两个悠悠球，然后这个人去捡悠悠球再回到原位置，问这两个悠悠球放在哪能让他走的路程最大。</p><p>思路：第一个球放在离他现在位置最远的地方，第二个球放在离第一个球最远的位置（其实就是某两个顶点处）</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n, m, xx, yy;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m&gt;&gt;xx&gt;&gt;yy;</span><br><span class="line">        <span class="keyword">if</span>(xx &lt;= (n<span class="number">+1</span>)/<span class="number">2</span>) x1 = n;</span><br><span class="line">        <span class="keyword">else</span> x1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(yy &lt;= (m<span class="number">+1</span>)/<span class="number">2</span>) y1 = m;</span><br><span class="line">        <span class="keyword">else</span> y1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x1 == n) x2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> x2 = n;</span><br><span class="line">        <span class="keyword">if</span>(y1 == m) y2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> y2 = m;</span><br><span class="line">        cout&lt;&lt;x1&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y1&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;x2&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y2&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Challenging-Cliffs"><a href="#C-Challenging-Cliffs" class="headerlink" title="C-Challenging Cliffs"></a>C-Challenging Cliffs</h1><p>题意：给定一个数组，每个数组元素代表一座山，值代表高度。从i -&gt; i+1， 如果$h_{i} &lt;&#x3D; h_{i+1}$，则贡献值加1。让你重新排列数组，找出贡献值最大的排列，同时还要满足数组第一个值和最后一个值的差值是最小的。</p><p>思路：排个序。找出最小差值，然后按照排序之后的顺序分段输出即可保证贡献值最大。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> a[n<span class="number">+1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin&gt;&gt;a[i];</span><br><span class="line">        <span class="built_in">sort</span>(a<span class="number">+1</span>, a+n<span class="number">+1</span>);</span><br><span class="line">        <span class="type">int</span> minn = a[<span class="number">2</span>]-a[<span class="number">1</span>], id = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]-a[i<span class="number">-1</span>] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                minn = a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">                id = i<span class="number">-1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;a[id]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = id<span class="number">+2</span>; i &lt;= n; i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; id; i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;a[id<span class="number">+1</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Deleting-Divisors"><a href="#D-Deleting-Divisors" class="headerlink" title="D-Deleting Divisors"></a>D-Deleting Divisors</h1><p>题意：Alice和Bob在玩游戏，Alice和Bob又在玩游戏，Alice和Bob总在玩游戏（o_o）<br>给定一个数字n，每次可以拿走一个n的除数（不能是1或n），n相应减少。无法再拿走除数时就输。Alice先手。</p><p>（参考了这位的博客：<a href="https://blog.csdn.net/weixin_50547586/article/details/117712183?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163705886416780269860355%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163705886416780269860355&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-117712183.pc_search_mgc_flag&utm_term=D%20-%20Deleting%20Divisors%20&spm=1018.2226.3001.4187">链接</a>）<br>思路：博弈论嘛，先分析出必败态为最后剩下一个质数（质数除了2都是奇数）。然后枚举情况（可以打表观察规律，这样推规律的时候就会方向清晰一点）</p><p>一、Alice先手拿到偶数。<br>（1）这个偶数由<strong>奇数*偶数</strong>组成：在最优选择下，Alice会减一个奇数的除数，剩下一个奇数给Bob，Bob只能减奇数的除数（因为没有偶数的除数），剩下一个偶数给Alice，开始循环。。。则Alice必胜<br>（2）这个偶数由<strong>偶数*偶数</strong>组成（可以表示为$2^{n}$）：在最优选择下，Alice会选择减去$2^{n-1}$，剩下$2^{n-1}$给Bob（不这样减的话，Bob一定拿到<strong>奇数*偶数</strong>，则Bob就一定赢），Bob也同样会继续选择减去$2^{(n-1)-1}$。那么最终状态就是：如果n是偶数，则Bob拿到2，Bob输；如果n是奇数，则Alice拿到2，Alice输。</p><p>二、Alice先手拿到奇数<br>Alice只能减去一个奇数的除数，则Bob拿到由<strong>奇数*偶数</strong>组成的偶数，即Alice必输。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;Bob&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                n /= <span class="number">2</span>;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n != <span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;Alice&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;Bob&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Alice&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Erase-and-Extend-Easy-Version"><a href="#E-Erase-and-Extend-Easy-Version" class="headerlink" title="E-Erase and Extend (Easy Version)"></a>E-Erase and Extend (Easy Version)</h1><p>题意：给定一个长度为n的字符串s，可以无限次进行两种操作：删除最后一个元素或者使s &#x3D; s+s。求通过这两种操作，可以得到的长度为k的最小的字符串。</p><p>思路：建议先看一遍代码。最终的答案肯定是s的一个前缀子串的重复。然后证明这种做法的合理性：(cnt代表：从s[0]开始的，最终结果中的前缀子串的长度)。纯证明肯定是没有举栗子更好理解。</p><p>（1）s[i] &gt; s[i%cnt]<br>第i个元素比前缀子串中对应位置的元素大，显而易见该结束了<br>举个栗子：dcadcb  这种情况就是：目前的最优字串为dca，然后遇到了b，b&gt;a，如果结束，最优字串重复为：dcadcadca，否则就是：dcadcbdca。肯定前面的是要小的，所以说明确实该结束了。</p><p>（2）s[i] &lt; s[i%cnt]<br>第i个元素比最优前缀中对应位置的元素小，那就说明最优字串可以扩充s[i]。<br>举个栗子：dcbdca  这种情况就是：目前的最优字串为dcb，然后遇到了a，a&lt;b，如果扩充，最优字串重复就是 dcbdcadcbdca，否则就是 dcbdcbdcbdcb，肯定是前面小，所以最优字串应该扩充</p><p>（3）s[i] &#x3D;&#x3D; s[i%cnt]<br>这种情况是不能break的。因为不知道s[i+1]和s[(i+1)%cnt]的大小情况。<br>举个栗子：dbda ，等于说现在到了第二个d的位置，现在最优字串是db，如果break，第一种情况的答案就是dbdbdbdb，和dbdadbda的比较，显见是不能break；<br>再举个栗子：dbdc，和上面差不多，break后就是dbdbdbdb，和dbdcdbdc比较确实是更优的。<br>综上所述不能break。同样的道理，也不能更新最优字串到s[i]。</p><p><strong>大家举举栗子就会发现很好理解。</strong><br>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n, k; cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    string s; cin&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] &gt; s[i%cnt]) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i] &lt; s[i%cnt]) cnt = i<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) cout&lt;&lt;s[i%cnt];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Erase-and-Extend-Hard-Version"><a href="#F-Erase-and-Extend-Hard-Version" class="headerlink" title="F-Erase and Extend (Hard Version)"></a>F-Erase and Extend (Hard Version)</h1><p>E的代码的时间复杂度是O(n)，可以直接过F。</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 104 (Rated for Div. 2)（A B C D E F）</title>
      <link href="/2021/11/12/Educational%20Codeforces%20Round%20104%20(Rated%20for%20Div.%202)%EF%BC%88A%20B%20C%20D%20E%20F%EF%BC%89/"/>
      <url>/2021/11/12/Educational%20Codeforces%20Round%20104%20(Rated%20for%20Div.%202)%EF%BC%88A%20B%20C%20D%20E%20F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>题目链接<a href="https://codeforces.com/contest/1487">https://codeforces.com/contest/1487</a></p><h1 id="A-Arena"><a href="#A-Arena" class="headerlink" title="A- Arena"></a>A- Arena</h1><p>题目：有n个有等级英雄，和同等级的英雄打会平局，和比自己等级低的打可以使自己等级上升1，两个英雄可以打很多次。称可以达到$100^{500}$的英雄可以成为冠军，问有多少个可能的冠军</p><p>思路：比最小值大就可以。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> minn = inf;</span><br><span class="line">        <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin&gt;&gt;a[i], minn = <span class="built_in">min</span>(a[i], minn);</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; minn) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="B-Cat-Cycle"><a href="#B-Cat-Cycle" class="headerlink" title="B- Cat Cycle"></a>B- Cat Cycle</h1><p>题意：A的移动顺序是1 2 3 … n 1 2…；B的移动顺序是n n-1 n-2 … 3 2 1 n n-1 …如果某一时刻B的值与A相等，那么A再移动一次。问在第k小时，A在哪。</p><p>思路：枚举找规律可以发现：<br>n是偶数的时候，B不会对A的移动产生影响，所以答案是k%n</p><p>n是奇数的时候，在经过n&#x2F;2秒之后，A和B猫会在中间相遇，此时A要多走一格。此时某种意义上又和初始状态一样了，只不过间隔着n-2个格子。也就是说每n&#x2F;2秒，A会多走一格。所以答案是(k+(k-1)&#x2F;(n&#x2F;2))%n即可。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n, k; cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="type">int</span> ans;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans = (k+(k<span class="number">-1</span>)/(n/<span class="number">2</span>))%n;</span><br><span class="line">        <span class="keyword">else</span> ans = k%n;</span><br><span class="line">        cout&lt;&lt;(ans == <span class="number">0</span> ? n:ans)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="C-Minimum-Ties"><a href="#C-Minimum-Ties" class="headerlink" title="C- Minimum Ties"></a>C- Minimum Ties</h1><p>题意：n个队打比赛，每队和其他队各交手一次。赢的队得三分，输的队得0分；平局各得一分。要求最后每队得到的分数一样多且平局得数量尽可能地小。胜局结果为1，负局为结果-1，平局结果为0。最后输出格式为:以n为5为例：1-2, 1-3, 1-4, 1-5, 2-3, 2-4, 2-5, 3-4, 3-5, 4-5队之间的结果。</p><p>思路：基本思路为，每个队赢一半输一半，如果多出来一局就平局。<br>    （1）n&#x3D;5（奇数）<br>        一队：1 1 -1 -1<br>        二队：-1 1 1 -1<br>        三队：-1 -1 1 1<br>        四队：1 -1 -1 1<br>        五队：1 1 -1 -1<br>         (2) n&#x3D;4（偶数）<br>         一队：1 0 -1<br>         二队：-1 1 0<br>         三队：0 -1 1<br>         四队：1 0 -1<br>    没错，最后按顺序输出一队的结果就是答案。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e3</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &lt;= n/<span class="number">2</span>) ans[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i == n/<span class="number">2</span><span class="number">+1</span>) ans[i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> ans[i] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &lt;= n/<span class="number">2</span>) ans[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> ans[i] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">                cout&lt;&lt;ans[j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Pythagorean-Triples"><a href="#D-Pythagorean-Triples" class="headerlink" title="D- Pythagorean Triples"></a>D- Pythagorean Triples</h1><p>题意: 求在1&lt;&#x3D;a&lt;&#x3D;b&lt;&#x3D;c&lt;&#x3D;n的范围内，同时满足$a^{2}+b^{2} &#x3D; c^{2}$ 和$a^{2}-b&#x3D;c^{2}$的（a,b,c）有多少组。</p><p>思路：用数学推一下，可以得到a, b, c之间的关系。暴力枚举a的取值，满足b,c小于等于n且b,c是整数答案加1。<br>推导过程如下：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f046fb99ec91267512ae4849fe93fd89.jpeg#pic_center" alt="在这里插入图片描述"><br>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e3</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i*i<span class="number">+1</span>)/<span class="number">2</span> &gt; n) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>((i*i<span class="number">+1</span>)%<span class="number">2</span> == <span class="number">0</span> &amp;&amp; (i*i<span class="number">+1</span>)/<span class="number">2</span><span class="number">-1</span> &gt;= <span class="number">1</span>) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="E-Cheap-Dinner"><a href="#E-Cheap-Dinner" class="headerlink" title="E- Cheap Dinner"></a>E- Cheap Dinner</h1><p>题意：有$n_{1}$种主食，$n_{2}$种副食，$n_{3}$种饮料，$n_{4}$种甜点，有$m_{1}$，$m_{2}$，$m_{3}$对关系，$m_{1}$的每对关系代表一些主食与副食不能搭配，$m_{2}$代表一些副食与饮料不能搭配，$m_{3}$代表一些饮料和甜点不能搭配。每个食物都有价格，问怎么选才能使得价格最少，并且这4类要有，输出最少的花费。</p><p>思路：整体就像暴力模拟，把每一组中各个食物能选的最小花费的搭配存进cost里面，因为是set，所以最优的结果就是第四组中的第一个值（cost[3].begin()-&gt;first）。具体看代码吧，有疑惑请留言。<br>(网络流时间过不了，题解给的是数据结构的写法，看其他博主还用了线段树优化的dp也可以过)</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">150000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    IOS</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>];  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) cin&gt;&gt;a[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> b[<span class="number">4</span>][N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; a[i]; j++)</span><br><span class="line">            cin&gt;&gt;b[i][j];</span><br><span class="line"></span><br><span class="line">    vector&lt;set&lt;<span class="type">int</span>&gt; &gt; edge[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        edge[i] = vector&lt;set&lt;<span class="type">int</span>&gt; &gt;(a[i<span class="number">+1</span>]);</span><br><span class="line">        <span class="type">int</span> x; cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u, v; cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">            u--; v--;</span><br><span class="line">            edge[i][v].<span class="built_in">insert</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    set&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; cost[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[<span class="number">0</span>]; i++) cost[<span class="number">0</span>].<span class="built_in">insert</span>(&#123;b[<span class="number">0</span>][i], i&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; a[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = cost[i<span class="number">-1</span>].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">while</span>(it != cost[i<span class="number">-1</span>].<span class="built_in">end</span>() &amp;&amp; edge[i<span class="number">-1</span>][j].<span class="built_in">count</span>(it-&gt;second))</span><br><span class="line">                it++;</span><br><span class="line">            <span class="keyword">if</span>(it != cost[i<span class="number">-1</span>].<span class="built_in">end</span>())</span><br><span class="line">                cost[i].<span class="built_in">insert</span>(&#123;it-&gt;first+b[i][j], j&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cost[<span class="number">3</span>].<span class="built_in">size</span>() == <span class="number">0</span>) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;cost[<span class="number">3</span>].<span class="built_in">begin</span>()-&gt;first&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="F-Ones"><a href="#F-Ones" class="headerlink" title="F- Ones"></a>F- Ones</h1><p>( 整理ing)<br>题意：</p><p>思路： dp</p><p>代码：</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 743 (Div. 2) (A B C D E)</title>
      <link href="/2021/11/09/Codeforces%20Round%20743%20(Div.%202)%20%EF%BC%88A%20B%20C%20D%20E%EF%BC%89/"/>
      <url>/2021/11/09/Codeforces%20Round%20743%20(Div.%202)%20%EF%BC%88A%20B%20C%20D%20E%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1573">https://codeforces.com/contest/1573</a></p><h1 id="A-Countdown"><a href="#A-Countdown" class="headerlink" title="A Countdown"></a>A Countdown</h1><p>题意：给定一个含前导零的字符串，每次可以选择将字符串的最后一位减一或者将字符串的其它位和最后一位置换。、</p><p>思路：模拟一下即可</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;s;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">            <span class="keyword">if</span>(s[i] != <span class="string">&#x27;0&#x27;</span>) ans += <span class="built_in">int</span>(s[i]-<span class="string">&#x27;0&#x27;</span>)<span class="number">+1</span>;</span><br><span class="line">        ans += <span class="built_in">int</span>(s[n<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Swaps"><a href="#B-Swaps" class="headerlink" title="B Swaps"></a>B Swaps</h1><p>题意:给定两个数组，数组a由奇数组成，数组b由偶数组成。可以在一个数组中任意交换两个连续的值，问使得数组a小于数组b的最小交换次数是多少。</p><p>思路：最优结果肯定是交换两个值分别到a和b数组的开头，满足a数组小于b数组。对a数组从小到大排序，然后遍历a数组，在b数组中第一次找到比a[i]大的值时，是一种满足a数组小于b数组的交换方式。由于a数组单调递增，所以b数组只用遍历一次。对所有合法的交换方式取最小值即为答案。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, b[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, idx;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin&gt;&gt;a[i].x, a[i].idx = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin&gt;&gt;b[i];</span><br><span class="line">        <span class="built_in">sort</span>(a, a+n);</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>, ans = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(b[j] &lt; a[i].x &amp;&amp; j &lt; n) j++;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, j+a[i].idx);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="C-Book"><a href="#C-Book" class="headerlink" title="C Book"></a>C Book</h1><p>题意：想读懂一本书,要读懂每一页。但是想读懂某一页的时候要先读过指定的几页。问最少要从前往后读几轮能把整本书读懂。</p><p>思路：拓扑排序加dp。dp[i]存读到第i页时最小是第几轮。状态转移方程，dp[v] &#x3D; max(dp[v], dp[u]+(u&gt;v))（要读第v页，需要先读第u页）。+ (u&gt;v)是为了控制：若第u页在第v页前面(u&lt;v)，则这两页是在同一轮读的；反之，要先读第u页，再在dp[u]的下一轮读第v页（u&gt;v）。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, in[N], dp[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tuopo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k; cin&gt;&gt;k;</span><br><span class="line">        <span class="keyword">while</span>(k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x; cin&gt;&gt;x;</span><br><span class="line">            edge[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">            in[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!in[i]) </span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// ans.push_back(u);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : edge[u])</span><br><span class="line">        &#123;</span><br><span class="line">            in[v]--;</span><br><span class="line">            dp[v] = <span class="built_in">max</span>(dp[v], dp[u]+(u&gt;v));</span><br><span class="line">            <span class="keyword">if</span>(!in[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) edge[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// ans.clear();</span></span><br><span class="line">        <span class="built_in">mem</span>(dp, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">mem</span>(in, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">tuopo</span>();</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>, cnt = -inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i]) flag = <span class="number">1</span>;</span><br><span class="line">            cnt = <span class="built_in">max</span>(cnt, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Xor-of-3"><a href="#D-Xor-of-3" class="headerlink" title="D Xor of 3"></a>D Xor of 3</h1><p>题意：给定一个由0或1组成的数组，定义一种操作：把$a_{i}$, $a_{i+1}$, $a_{i+2}$ 变为$a_{i}$⊕$a_{i+1}$⊕$a_{i+2}$的结果（1&lt;&#x3D;i&lt;&#x3D;n-2）。问是否可以通过这种操作将给定的数组全部变为0，如果不可以，输出NO；否则在第一行输出YES，第二行输出选择的下标个数，第三行输出选择的下标。</p><p>思路：首先，对于连续的三个数字来说，只有两个1和一个0，亦或的结果才是0。所以只有当1的个数是偶数时，才有可能实现。<br>然后，分析一段连续出现的1的个数<br>    （1）当这一位前面1的个数为奇数时（这一位为0），枚举下一位的可能情况，当下一位为0，则出现了偶数个1和1 0 0，这时选择将1 0 0变为 1 1 1，继续向后枚举；当下一位为1，则出现了偶数个1和1 0 1，则可以将其全部变为0。<br>    （2）当这一位前面1的个数为偶数时（这一位为0），则出现了 偶数个1和1个0（110），这时可以从后往前间隔两位选1，变成0 0 0，则前面的所有值都变成了0<br>最后，需要特判一种情况，即最后变为偶数个1时没有0了（1 0 0 1 –&gt; 1 1 1 1）。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[N], sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;a[i];</span><br><span class="line">            sum[i] = sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">            <span class="keyword">if</span>(a[i] == <span class="number">1</span>) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt%<span class="number">2</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]) cnt++;</span><br><span class="line">            <span class="comment">// 前面有奇数个1，本身是0</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt%<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i<span class="number">+1</span>])     <span class="comment">// 100</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(i<span class="number">-1</span>);</span><br><span class="line">                    a[i] = <span class="number">1</span>;</span><br><span class="line">                    a[i<span class="number">+1</span>] = <span class="number">1</span>;</span><br><span class="line">                    cnt++;  <span class="comment">// a[i+1]变成1之后cnt还会+1，所以这里+1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>    <span class="comment">// 101</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[i<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">                    a[i<span class="number">+1</span>] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j = i<span class="number">-1</span>; j &gt;= i-cnt; j -= <span class="number">2</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ans.<span class="built_in">push_back</span>(j);</span><br><span class="line">                        a[j] = a[j<span class="number">+1</span>] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cnt = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// 前面偶数个1，本身为0  110</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = i<span class="number">-2</span>; j &gt;= i-cnt; j -= <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(j);</span><br><span class="line">                    a[j] = <span class="number">0</span>;</span><br><span class="line">                    a[j<span class="number">+1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt == n)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = n-cnt; i &lt;= n<span class="number">-2</span>; i +=<span class="number">2</span> ) ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;;</span><br><span class="line">        cout&lt;&lt;ans.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : ans) cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">size</span>()) cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Paint"><a href="#E-Paint" class="headerlink" title="E Paint"></a>E Paint</h1><p><strong>(整理ing…)</strong><br>题意：</p><p>思路：优化的区间dp</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;**&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e3</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[N], p[N], c[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin&gt;&gt;a[i];</span><br><span class="line">        <span class="built_in">mem</span>(c, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// p数组存的是这个位置的数字上次出现的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            p[i] = c[a[i]];</span><br><span class="line">            c[a[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">1</span>; len &lt; n; len++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>; l &lt;= n-len; l++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> r = l+len;</span><br><span class="line">                <span class="comment">// dp[l][r] = min(dp[l][r-1]+1, dp[l+1][r]+1);</span></span><br><span class="line">                dp[l][r] = dp[l][r<span class="number">-1</span>] + (a[r<span class="number">-1</span>] != a[r]);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果[l, r]中有和r相同的数字，则dp[l][k]]+dp[k+1][r]可能会更新出更优解</span></span><br><span class="line">                <span class="comment">// 如果没有，那[l, r]就是最优解：枚举一个断点x，少一次把[l, x]染为r相同颜色的操作，多一次x左右颜色统一的操作</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = p[r]; k &gt;= l; k = p[k])</span><br><span class="line">                    dp[l][r] = <span class="built_in">min</span>(dp[l][r], dp[l][k]+dp[k<span class="number">+1</span>][r]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;dp[<span class="number">1</span>][n]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络流（所有常用类型网络流算法的模板）</title>
      <link href="/2021/09/28/%E7%BD%91%E7%BB%9C%E6%B5%81%EF%BC%88%E6%89%80%E6%9C%89%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%BD%91%E7%BB%9C%E6%B5%81%E7%AE%97%E6%B3%95%E7%9A%84%E6%A8%A1%E6%9D%BF%EF%BC%89/"/>
      <url>/2021/09/28/%E7%BD%91%E7%BB%9C%E6%B5%81%EF%BC%88%E6%89%80%E6%9C%89%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%BD%91%E7%BB%9C%E6%B5%81%E7%AE%97%E6%B3%95%E7%9A%84%E6%A8%A1%E6%9D%BF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="网络流算法讲解"><a href="#网络流算法讲解" class="headerlink" title="网络流算法讲解"></a>网络流算法讲解</h1><p>网络流描述：给定一幅图（n个结点，m条边），每一条边有一个容量，现在需要将一些物品从结点s（称为源点）运送到结点t（称为汇点），可以从其他结点中转。<br>满足以下三个性质的网络流叫做可行流：<br>（1）容量约束：任意一条边的流量不超过最大容量。<br>（2）反对称性：节点u到v的流量和节点v到u的流量互为负数。<br>（3）流量守恒：除了源点s和汇点t，所有节点的流入量等于流出量。<br>网络最大流指在满足可行流的条件下，边的实际流量最大的网络流。求最大流的基本思想为：在网络中找增广路（边的实际流量可以继续增加），沿着增广路增加流量，直到不存在增广路为止。<br>上下界网络流问题是指每条边的流量有一个上界和下界。</p><h1 id="关键代码讲解"><a href="#关键代码讲解" class="headerlink" title="关键代码讲解"></a>关键代码讲解</h1><p>（1）使用链式前向星存图。<br>（2）存储的网络为混合网络，将残余网络和实流网络融为一体。混合网络的特殊之处为它的正向边有两个变量 cap（边的容量），flow（实际流量）。在增流时cap不变，flow+&#x3D;d；反向边的cap &#x3D; 0，flow &#x3D; -flow，增流时cap不变，flow -&#x3D; d。在正向边中cap-flow代表残余容量，反向边cap-flow代表实际流量。<br>（3）建议着重理解Dinic求最大流和无源汇上下界可行流。</p><h1 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h1><h2 id="EK"><a href="#EK" class="headerlink" title="EK"></a>EK</h2><p>题目：AcWing 2171，  HDU 3549， HDU 1532 </p><p>算法详解：EK算法是以广度优先搜索为基础的最短路增广算法。采用队列q存放已访问     未检查的节点，数组vis[]标记节点是否被访问，pre[]数组记录增广路上节点的前驱。</p><p>算法步骤：<br>（1）初始化可行流flow为0，vis[]数组为false，pre[]数组为-1，最大流值maxflow&#x3D;0。<br>（2）令vis[s]&#x3D;true，将s加入队列q。<br>（3）若队列为空，则算法结束，当前实流网络就是最大流网络，返回最大流的值。<br>（4）队头元素 u出队，在残余网络中检查u的所有邻接节点 i，若未被访问，则访问它，                令 vis[i]&#x3D;true,pre[i]&#x3D;u，若 i&#x3D;&#x3D;t，则说明已到达汇点，找到一条增广路，转向第5步，否则              i进入队列 q，转向第3步。<br>（5）从汇点开始，用前驱数组 pre[]，在残余网络中逆向找增广路上每条边的最小值d。<br>（6）在实流网络中增流，在残余网络中减流。maxflow+&#x3D;d，转向第2步。</p><p>代码：时间复杂度O(n$m^{2}$)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t, tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> vis[N], pre[N], head[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to, next, cap, flow;</span><br><span class="line">&#125;e[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++tot].cap = c; e[tot].flow = <span class="number">0</span>; e[tot].to = b; e[tot].next = head[a]; head[a] = tot;</span><br><span class="line">e[++tot].cap = <span class="number">0</span>; e[tot].flow = <span class="number">0</span>; e[tot].to = a; e[tot].next = head[b]; head[b] = tot; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">vis[s] = <span class="number">1</span>; </span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!vis[v] &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">pre[v] = i;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">EK</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>(s, t))</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> d = inf;</span><br><span class="line"><span class="type">int</span> v = t;</span><br><span class="line"><span class="keyword">while</span>(v != s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = pre[v];</span><br><span class="line">d = <span class="built_in">min</span>(d, e[i].cap - e[i].flow);</span><br><span class="line">v = e[i^<span class="number">1</span>].to;</span><br><span class="line">&#125;</span><br><span class="line">maxflow += d;</span><br><span class="line">v = t;</span><br><span class="line"><span class="keyword">while</span>(v != s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = pre[v];</span><br><span class="line">e[i].flow += d;</span><br><span class="line">e[i^<span class="number">1</span>].flow -= d;</span><br><span class="line">v = e[i^<span class="number">1</span>].to;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="built_in">add</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">EK</span>(s, t);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h2><p>题目：AcWing 2172，POJ 1149，  POJ 1459</p><p>算法详解：Dinic算法每次通过广度优先搜索（BFS）分层，然后通过深度优先搜索（DFS）沿着层次增 1且 cap&gt;flow的方向找增广路，回溯时增流。一次DFS中可以实现多次增流，这正是Dinic算法的巧妙之处。使用了弧优化提高效率。</p><p>算法步骤：<br>（1）在残余网络中通过广度优先搜索进行分层。<br>（2）在层次图中深度优先搜索，沿着层次增 1且 cap&gt;flow的方向找增广路，回溯时增流<br>（3）重复以上步骤，直到找不到增广路为止，得到最大流。</p><p>时间复杂度：O($n^{2}$m)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">1e4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">10</span> + <span class="number">1e5</span> + N;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t, tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> head[M&lt;&lt;<span class="number">1</span>], cur[M&lt;&lt;<span class="number">1</span>], d[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to, next, cap, flow;</span><br><span class="line">&#125;e[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++tot].cap = c; e[tot].flow = <span class="number">0</span>; e[tot].to = b; e[tot].next = head[a]; head[a] = tot;</span><br><span class="line">e[++tot].cap = <span class="number">0</span>; e[tot].flow = <span class="number">0</span>; e[tot].to = a; e[tot].next = head[b]; head[b] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">d[s] = <span class="number">1</span>;</span><br><span class="line">cur[s] = head[s];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!d[v] &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line">d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">cur[v] = head[v];</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lim, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> lim;</span><br><span class="line"><span class="type">int</span> res = lim;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i &amp;&amp; res; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">cur[u] = i;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(d[v] == d[u]<span class="number">+1</span> &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">dfs</span>(v, <span class="built_in">min</span>(res, e[i].cap-e[i].flow), t);</span><br><span class="line"><span class="keyword">if</span>(!k) d[v] = <span class="number">0</span>;</span><br><span class="line">e[i].flow += k;</span><br><span class="line">e[i^<span class="number">1</span>].flow -= k;</span><br><span class="line">res -= k; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>()) maxflow += <span class="built_in">dfs</span>(s, inf, t);</span><br><span class="line"><span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="built_in">add</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">dinic</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ISAP"><a href="#ISAP" class="headerlink" title="ISAP"></a>ISAP</h2><p>题目：AcWing 2172</p><p>算法详解：首先是贴标签：对所有节点都标记到汇点的最短距离，称之为高度（BFS实现）。然后从源点开始，沿着高度减1且有可行邻边的方向前进。找到汇点之后增流。当前节点无法前进时，重贴标签。</p><p>算法步骤：<br>（1）标高操作，从汇点开始对节点贴标签。<br>（2）找增广路，若源点的高度大于等于节点数，转向第5步；否则沿着高度h[u] &#x3D; h[v]+1且cap&gt;flow的方向前进。若到达汇点则转向第3步；若无法前进，转向第4步。<br>（3）增流操作，在混合网络中沿着增广路同向的边增流，反向边减流。<br>（4）重贴标签，当前节点无法前进时，若拥有当前节点高度的节点只有一个，则转向第5步，否则令当前节点的高度等于所有可行邻接点高度的最小值加1，若没有可行邻接边，则令当前节点的高度等于节点数，转向第2步。<br>（5）算法结束，已经找到最大流。</p><p>代码：时间复杂度：O($n^{2}$m)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">1e4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">10</span> + <span class="number">1e5</span> + N;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t, tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> head[M&lt;&lt;<span class="number">1</span>], d[N], h[N], g[N], pre[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to, next, cap, flow;</span><br><span class="line">&#125;e[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++tot].cap = c; e[tot].flow = <span class="number">0</span>; e[tot].to = b; e[tot].next = head[a]; head[a] = tot;</span><br><span class="line">e[++tot].cap = <span class="number">0</span>; e[tot].flow = <span class="number">0</span>; e[tot].to = a; e[tot].next = head[b]; head[b] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_h</span><span class="params">(<span class="type">int</span> t, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">h[t] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">++g[h[u]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(h[v] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ISAP</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set_h</span>(t, n);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>, u = s, d;</span><br><span class="line"><span class="keyword">while</span>(h[s] &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = head[u];</span><br><span class="line"><span class="keyword">if</span>(u == s) d = inf;</span><br><span class="line"><span class="keyword">for</span>(; ~i; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(e[i].cap &gt; e[i].flow &amp;&amp; h[u] == h[v]<span class="number">+1</span>)</span><br><span class="line">&#123;</span><br><span class="line">u = v;</span><br><span class="line">pre[v] = i;</span><br><span class="line">d = <span class="built_in">min</span>(d, e[i].cap-e[i].flow);</span><br><span class="line"><span class="keyword">if</span>(u == t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(u != s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = pre[u];</span><br><span class="line">e[j].flow += d;</span><br><span class="line">e[j^<span class="number">1</span>].flow -= d;</span><br><span class="line">u = e[j^<span class="number">1</span>].to;</span><br><span class="line">&#125;</span><br><span class="line">ans += d;</span><br><span class="line">d = inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(--g[h[u]] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> hmin = n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = head[u]; ~j; j = e[j].next)</span><br><span class="line"><span class="keyword">if</span>(e[j].cap &gt; e[j].flow)</span><br><span class="line">hmin = <span class="built_in">min</span>(hmin, h[e[j].to]);</span><br><span class="line">h[u] = hmin<span class="number">+1</span>;</span><br><span class="line">++g[h[u]];</span><br><span class="line"><span class="keyword">if</span>(u != s) u = e[pre[u]^<span class="number">1</span>].to;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="built_in">add</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">ISAP</span>(s, t, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="无源汇"><a href="#无源汇" class="headerlink" title="无源汇"></a>无源汇</h1><h2 id="无源汇上下界可行流"><a href="#无源汇上下界可行流" class="headerlink" title="无源汇上下界可行流"></a>无源汇上下界可行流</h2><p>题目：AcWing: 2188</p><p>算法详解：可行流中每条边的流量一定大于等于下界，所以建一个每条边流量为流量下界的初始流，使用数组L存储，然后在混合网络中建正向边容量为上界减下界（d-c），反向边容量为0的网络。最终的可行流一定是在这个初始流的基础上增大了一些边的流量使得所有点满足流量守恒，将后面增加的称作附加流。<br><strong>重点</strong>：如果某个点在初始流中的流入量比流出量多x,那么这个点在附加流中的流出量就应该比流入量多x。如果某个点在初始流中的流入量比流出量少x,那么这个点在附加流中的流出量就应该比流入量少x。所以使用数组delta存储每个节点在初始流中流入量减流出量的值。求这个附加流的做法是：给在附加流中所有流入量大于流出量的节点u与虚拟汇点t建一条流量为-delta[u]的边（给多的流入量找个去处也就是再流出到t），给在附加流中虚拟源点s与所有流出量大于流入量的节点v建一条流量为delta[v]的边（给多的流出量找个来处也就是从s流入）。<br>然后在从虚拟源点到虚拟汇点t使用Dinic跑一遍最大流算法，这时的去掉虚拟源点和虚拟汇点的网络流就是所需要的附加流。最后，每条边在可行流中的流量 &#x3D; 容量下界 + 附加流中流量。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = (<span class="number">100210</span> + N) + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t, tot = <span class="number">1</span>, tott;</span><br><span class="line"><span class="type">int</span> head[M&lt;&lt;<span class="number">1</span>], d[N], L[M&lt;&lt;<span class="number">1</span>], cur[N], delta[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to, next, cap, flow;</span><br><span class="line">&#125;e[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++tot].cap = d-c; e[tot].flow = <span class="number">0</span>; e[tot].to = b; e[tot].next = head[a]; head[a] = tot;</span><br><span class="line">L[tot] = c;</span><br><span class="line">e[++tot].cap = <span class="number">0</span>; e[tot].flow = <span class="number">0</span>; e[tot].to = a; e[tot].next = head[b]; head[b] = tot; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">d[s] = <span class="number">1</span>;</span><br><span class="line">cur[s] = head[s];</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!d[v] &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line">d[v] = d[u]<span class="number">+1</span>;</span><br><span class="line">cur[v] = head[v];</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="type">int</span> res = flow;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i &amp;&amp; res; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">cur[u] = i;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(d[v] == d[u]<span class="number">+1</span> &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">dfs</span>(v, <span class="built_in">min</span>(res, e[i].cap-e[i].flow), t);</span><br><span class="line"><span class="keyword">if</span>(!k) d[v] = <span class="number">0</span>;</span><br><span class="line">e[i].flow += k;</span><br><span class="line">e[i^<span class="number">1</span>].flow -= k;</span><br><span class="line">res -= k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow-res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> maxflow = <span class="number">0</span>, flow;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>(s, t)) maxflow += <span class="built_in">dfs</span>(s, inf, t);</span><br><span class="line"><span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line">t = n<span class="number">+1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, d; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">delta[a] -= c;</span><br><span class="line">delta[b] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(delta[i] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(s, i, <span class="number">0</span>, delta[i]);</span><br><span class="line">tott += delta[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(delta[i] &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">add</span>(i, t, <span class="number">0</span>, -delta[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dinic</span>() != tott)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果为可行流中每条边的流量</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; m*<span class="number">2</span><span class="number">+2</span>; i += <span class="number">2</span>)</span><br><span class="line">cout&lt;&lt;e[i^<span class="number">1</span>].cap-e[i^<span class="number">1</span>].flow+L[i]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="有源汇"><a href="#有源汇" class="headerlink" title="有源汇"></a>有源汇</h1><h2 id="有源汇上下界可行流"><a href="#有源汇上下界可行流" class="headerlink" title="有源汇上下界可行流"></a>有源汇上下界可行流</h2><p>算法详解：为了使源汇点满足流量守恒，所以从汇点tt向源点ss连一条下界为0上界为无穷大的边，相当于把从源点s流出的流量再流回来。在这样的图中使用无源汇上下界可行流算法求出一个可行流，拆掉从汇点tt到源点ss的边就得到一个有源汇上下界可行流。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = (<span class="number">100210</span> + N) + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t, ss, tt, tot = <span class="number">1</span>, tott;</span><br><span class="line"><span class="type">int</span> head[M&lt;&lt;<span class="number">1</span>], d[N], L[M&lt;&lt;<span class="number">1</span>], cur[N], delta[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to, next, cap, flow;</span><br><span class="line">&#125;e[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++tot].cap = d-c; e[tot].flow = <span class="number">0</span>; e[tot].to = b; e[tot].next = head[a]; head[a] = tot;</span><br><span class="line">L[tot] = c;</span><br><span class="line">e[++tot].cap = <span class="number">0</span>; e[tot].flow = <span class="number">0</span>; e[tot].to = a; e[tot].next = head[b]; head[b] = tot; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">d[s] = <span class="number">1</span>;</span><br><span class="line">cur[s] = head[s];</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!d[v] &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line">d[v] = d[u]<span class="number">+1</span>;</span><br><span class="line">cur[v] = head[v];</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> flow, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="type">int</span> res = flow;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i &amp;&amp; res; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">cur[u] = i;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(d[v] == d[u]<span class="number">+1</span> &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">dfs</span>(v, <span class="built_in">min</span>(res, e[i].cap-e[i].flow), t);</span><br><span class="line"><span class="keyword">if</span>(!k) d[v] = <span class="number">0</span>;</span><br><span class="line">e[i].flow += k;</span><br><span class="line">e[i^<span class="number">1</span>].flow -= k;</span><br><span class="line">res -= k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow-res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> maxflow = <span class="number">0</span>, flow;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>(s, t)) maxflow += <span class="built_in">dfs</span>(s, inf, t);</span><br><span class="line"><span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;ss&gt;&gt;tt;</span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line">t = n<span class="number">+1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, d; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">delta[a] -= c;</span><br><span class="line">delta[b] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(delta[i] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(s, i, <span class="number">0</span>, delta[i]);</span><br><span class="line">tott += delta[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(delta[i] &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">add</span>(i, t, <span class="number">0</span>, -delta[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">add</span>(tt, ss, <span class="number">0</span>, inf);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dinic</span>() != tott)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;e[tot].cap-e[tot].flow&lt;&lt;endl;</span><br><span class="line">e[tot].flow = e[tot].cap;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="有源汇上下界最大流"><a href="#有源汇上下界最大流" class="headerlink" title="有源汇上下界最大流"></a>有源汇上下界最大流</h2><p>题目：AcWing 2189</p><p>算法详解：先使用有源汇上下界可行流算法算出一个可行流，再在这个残余网络上跑一遍ss到tt的最大流。最终的最大流流量 &#x3D; 可行流流量(即t到s的无穷边上跑出的流量) + 新增广出的ss到tt的流量。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = (<span class="number">100210</span> + N) + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t, ss, tt, tot = <span class="number">1</span> , tott;</span><br><span class="line"><span class="type">int</span> head[M&lt;&lt;<span class="number">1</span>], d[N], cur[M&lt;&lt;<span class="number">1</span>], delta[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to, next, cap, flow;</span><br><span class="line">&#125;e[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++tot].cap = d-c; e[tot].flow = <span class="number">0</span>; e[tot].to = b; e[tot].next = head[a]; head[a] = tot;</span><br><span class="line">e[++tot].cap = <span class="number">0</span>; e[tot].flow = <span class="number">0</span>; e[tot].to = a; e[tot].next = head[b]; head[b] = tot; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">d[s] = <span class="number">1</span>;</span><br><span class="line">cur[s] = head[s];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!d[v] &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line">d[v] = d[u]<span class="number">+1</span>;</span><br><span class="line">cur[v] = head[v];</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lim, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> lim;</span><br><span class="line"><span class="type">int</span> res = lim;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i &amp;&amp; res; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">cur[u] = i;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(d[v] == d[u]<span class="number">+1</span> &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">dfs</span>(v, <span class="built_in">min</span>(res, e[i].cap-e[i].flow), t);</span><br><span class="line"><span class="keyword">if</span>(!k) d[v] = <span class="number">0</span>;</span><br><span class="line">e[i].flow += k;</span><br><span class="line">e[i^<span class="number">1</span>].flow -= k; </span><br><span class="line">res -= k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim-res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>(s, t)) maxflow += <span class="built_in">dfs</span>(s, inf, t);</span><br><span class="line"><span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;ss&gt;&gt;tt;</span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line">t = n<span class="number">+1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, d; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">delta[a] -= c;</span><br><span class="line">delta[b] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(delta[i] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(s, i, <span class="number">0</span>, delta[i]);</span><br><span class="line">tott += delta[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(delta[i] &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">add</span>(i, t, <span class="number">0</span>, -delta[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">add</span>(tt, ss, <span class="number">0</span>, inf);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dinic</span>() != tott)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No Solution&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">s = ss; t = tt;</span><br><span class="line"><span class="comment">// 先加可行流流量</span></span><br><span class="line"><span class="type">int</span> ans = e[tot].cap-e[tot].flow;</span><br><span class="line">e[tot].flow = <span class="number">0</span>; e[tot].cap = <span class="number">0</span>;</span><br><span class="line">e[tot<span class="number">-1</span>].flow = <span class="number">0</span>; e[tot<span class="number">-1</span>].cap = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 再加新增广为最大流的e(s-&gt;t)的流量</span></span><br><span class="line">ans += <span class="built_in">dinic</span>();</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="有源汇上下界最小流"><a href="#有源汇上下界最小流" class="headerlink" title="有源汇上下界最小流"></a>有源汇上下界最小流</h2><p>题目：AcWing 2190</p><p>算法详解：先使用有源汇上下界可行流算法算出一个可行流，再在这个残余网络上跑一遍tt到ss的最大流（反向边的流量增加等价于正向边的的流量减少。因此在残余网络上找出tt到ss的流就相当于减小了ss到tt的流）。最终的最小流流量 &#x3D; 可行流流量 - tt到ss的最大流的流量。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50003</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = (<span class="number">125003</span> + N) + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t, ss, tt, tot = <span class="number">1</span> , tott;</span><br><span class="line"><span class="type">int</span> head[M&lt;&lt;<span class="number">1</span>], d[N], cur[M&lt;&lt;<span class="number">1</span>], delta[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to, next, cap, flow;</span><br><span class="line">&#125;e[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++tot].cap = d-c; e[tot].flow = <span class="number">0</span>; e[tot].to = b; e[tot].next = head[a]; head[a] = tot;</span><br><span class="line">e[++tot].cap = <span class="number">0</span>; e[tot].flow = <span class="number">0</span>; e[tot].to = a; e[tot].next = head[b]; head[b] = tot; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">d[s] = <span class="number">1</span>;</span><br><span class="line">cur[s] = head[s];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!d[v] &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line">d[v] = d[u]<span class="number">+1</span>;</span><br><span class="line">cur[v] = head[v];</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lim, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> lim;</span><br><span class="line"><span class="type">int</span> res = lim;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i &amp;&amp; res; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">cur[u] = i;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(d[v] == d[u]<span class="number">+1</span> &amp;&amp; e[i].cap &gt; e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">dfs</span>(v, <span class="built_in">min</span>(res, e[i].cap-e[i].flow), t);</span><br><span class="line"><span class="keyword">if</span>(!k) d[v] = <span class="number">0</span>;</span><br><span class="line">e[i].flow += k;</span><br><span class="line">e[i^<span class="number">1</span>].flow -= k; </span><br><span class="line">res -= k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim-res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>(s, t)) maxflow += <span class="built_in">dfs</span>(s, inf, t);</span><br><span class="line"><span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;ss&gt;&gt;tt;</span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line">t = n<span class="number">+1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, d; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">delta[a] -= c;</span><br><span class="line">delta[b] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(delta[i] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(s, i, <span class="number">0</span>, delta[i]);</span><br><span class="line">tott += delta[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(delta[i] &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">add</span>(i, t, <span class="number">0</span>, -delta[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">add</span>(tt, ss, <span class="number">0</span>, inf);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dinic</span>() != tott)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No Solution&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = e[tot].cap-e[tot].flow;</span><br><span class="line">e[tot].flow = e[tot].cap;</span><br><span class="line">e[tot<span class="number">-1</span>].flow = e[tot<span class="number">-1</span>].cap;</span><br><span class="line"><span class="comment">// 重点</span></span><br><span class="line">s = tt; t = ss;</span><br><span class="line">ans -= <span class="built_in">dinic</span>();</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="多源汇"><a href="#多源汇" class="headerlink" title="多源汇"></a>多源汇</h1><h2 id="多源汇最大流"><a href="#多源汇最大流" class="headerlink" title="多源汇最大流"></a>多源汇最大流</h2><p>题目：AcWing 2234</p><p>算法详解：新建超级源点S，向所有源点连容量为inf的边，汇点同理。问题即转化为普通最大流问题。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2</span>*(<span class="number">1e5</span><span class="number">+1e4</span>) + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, ss, tt, s, t, tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> head[N], ver[M], edge[M], Next[M], level[N], cur[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ver[++tot] = b; edge[tot] = c; Next[tot] = head[a]; head[a] = tot;</span><br><span class="line">ver[++tot] = a; edge[tot] = <span class="number">0</span>; Next[tot] = head[b]; head[b] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(level, <span class="number">-1</span>, <span class="keyword">sizeof</span> level);</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">level[s] = <span class="number">0</span>;</span><br><span class="line">cur[s] = head[s];</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[x]; i; i = Next[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y = ver[i];</span><br><span class="line"><span class="keyword">if</span>(level[y] == <span class="number">-1</span> &amp;&amp; edge[i])</span><br><span class="line">&#123;</span><br><span class="line">level[y] = level[x] + <span class="number">1</span>;</span><br><span class="line">cur[y] = head[y];</span><br><span class="line"><span class="keyword">if</span>(y == t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> limit;</span><br><span class="line"><span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; i &amp;&amp; flow &lt; limit; i = Next[i])</span><br><span class="line">&#123;</span><br><span class="line">cur[u] = i;</span><br><span class="line"><span class="type">int</span> v = ver[i];</span><br><span class="line"><span class="keyword">if</span>(level[v] == level[u]<span class="number">+1</span> &amp;&amp; edge[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">dfs</span>(v, <span class="built_in">min</span>(edge[i], limit-flow));</span><br><span class="line"><span class="keyword">if</span>(!t) level[v] = <span class="number">-1</span>;</span><br><span class="line">flow += t;</span><br><span class="line">edge[i] -= t;</span><br><span class="line">edge[i^<span class="number">1</span>] += t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>()) ans += <span class="built_in">dfs</span>(s, inf);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;ss&gt;&gt;tt;</span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line">t = n<span class="number">+1</span>;</span><br><span class="line"><span class="keyword">while</span>(ss--) </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x; cin&gt;&gt;x;</span><br><span class="line"><span class="built_in">add</span>(s, x, inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(tt--) </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x; cin&gt;&gt;x;</span><br><span class="line"><span class="built_in">add</span>(x, t, inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="built_in">add</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">dinic</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a>费用流</h1><h2 id="最小费用最大流"><a href="#最小费用最大流" class="headerlink" title="最小费用最大流"></a>最小费用最大流</h2><p>题目：AcWing 2174</p><p>算法详解：从源点到汇点找以单位费用为边权的最短路，然后沿着最小费用增流，直到找不到最小费用路为止。<br>算法实现：<br>（1）求最小费用路（SPFA），从源点出发，沿着可行边（e[i].cap &gt; e[i].flow）广度优先搜素每个邻接点，若当前距离dist[v] &gt; dis[u]+e[i].cost，则更新dist[v] &#x3D; dis[u]+e[i].cost，并更新前驱。<br>（2）沿最小费用路增流，从汇点逆向到源点，找可增量d &#x3D; min(d, e[i].cap - e[i].flow)。然后沿着最小费用路正向边增流d，反向边减流d。产生的费用mincost +&#x3D; dist[t]*d。</p><p>代码：时间复杂度：O(n$m^{2}$)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span> + <span class="number">5e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">10</span> + <span class="number">5e4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t, ss, tt, tot = <span class="number">1</span>, maxflow, mincost;</span><br><span class="line"><span class="type">int</span> head[M&lt;&lt;<span class="number">1</span>], d[N], pre[N], dist[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to, next, cap, flow, cost;</span><br><span class="line">&#125;e[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++tot].cap = c; e[tot].flow = <span class="number">0</span>; e[tot].cost = d; e[tot].to = b; e[tot].next = head[a]; head[a] = tot;</span><br><span class="line">e[++tot].cap = <span class="number">0</span>; e[tot].flow = <span class="number">0</span>; e[tot].cost = -d; e[tot].to = a; e[tot].next = head[b]; head[b] = tot; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">vis[s] = <span class="literal">true</span>;</span><br><span class="line">dist[s] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">vis[u] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(e[i].cap &gt; e[i].flow &amp;&amp; dist[v] &gt; dist[u]+e[i].cost)</span><br><span class="line">&#123;</span><br><span class="line">dist[v] = dist[u]+e[i].cost;</span><br><span class="line">pre[v] = i;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">vis[v] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MCMF</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">maxflow = mincost = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">spfa</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> d = inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = pre[t]; ~i; i = pre[e[i^<span class="number">1</span>].to]) </span><br><span class="line">d = <span class="built_in">min</span>(d, e[i].cap-e[i].flow);</span><br><span class="line">maxflow += d;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = pre[t]; ~i; i = pre[e[i^<span class="number">1</span>].to])</span><br><span class="line">&#123;</span><br><span class="line">e[i].flow += d;</span><br><span class="line">e[i^<span class="number">1</span>].flow -= d;</span><br><span class="line">&#125;</span><br><span class="line">mincost += dist[t]*d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, d; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">MCMF</span>();</span><br><span class="line">cout&lt;&lt;maxflow&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;mincost&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小费用可行流"><a href="#最小费用可行流" class="headerlink" title="最小费用可行流"></a>最小费用可行流</h2><p>正在做题，先把前面的给出来吧</p><p>后记：<br>（1）推荐一篇讲解上下界网络流问题的博客：(上下界问题建议看看这位的，讲的很详细也很好，我也参考了这位的博客)<br> <a href="https://www.cnblogs.com/liu-runda/p/6262832.html">https://www.cnblogs.com/liu-runda/p/6262832.html</a></p><p>（2）如果有任何问题或者建议还请留言反馈，我会讲解或更改。</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>The 2021 Shanghai Collegiate Programming Contest(A B C D E G J)</title>
      <link href="/2021/09/21/The%202021%20Shanghai%20Collegiate%20Programming%20Contest(A%20B%20C%20D%20E%20G%20J)/"/>
      <url>/2021/09/21/The%202021%20Shanghai%20Collegiate%20Programming%20Contest(A%20B%20C%20D%20E%20G%20J)/</url>
      
        <content type="html"><![CDATA[<p><strong>题目链接</strong>: <a href="https://codeforces.com/gym/103186">“Dashboard - The 2021 Shanghai Collegiate Programming Contest - Codeforces”</a></p><p>前言：剩余题目待补充</p><hr><p>A - 小A的点面论</p><p>算法：几何知识</p><p>题解：答案为两个向量的叉积,(三维空间中，两个向量的叉积就是这两个向量确定平面的法向量) 可直接利用公式，也可以暴力枚举计算。</p><p>代码一：时间复杂度O(1)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e3</span> + <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line">&#125;s[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IOS;</span><br><span class="line">cin&gt;&gt;s[<span class="number">1</span>].x&gt;&gt;s[<span class="number">1</span>].y&gt;&gt;s[<span class="number">1</span>].z&gt;&gt;s[<span class="number">2</span>].x&gt;&gt;s[<span class="number">2</span>].y&gt;&gt;s[<span class="number">2</span>].z;</span><br><span class="line">    </span><br><span class="line">cout&lt;&lt;s[<span class="number">1</span>].y*s[<span class="number">2</span>].z-s[<span class="number">1</span>].z*s[<span class="number">2</span>].y&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;s[<span class="number">1</span>].z*s[<span class="number">2</span>].x-s[<span class="number">1</span>].x*s[<span class="number">2</span>].z&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;s[<span class="number">1</span>].x*s[<span class="number">2</span>].y-s[<span class="number">1</span>].y*s[<span class="number">2</span>].x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码二：时间复杂度O($n^3$)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e3</span> + <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line">&#125;s[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IOS;</span><br><span class="line">cin&gt;&gt;s[<span class="number">1</span>].x&gt;&gt;s[<span class="number">1</span>].y&gt;&gt;s[<span class="number">1</span>].z&gt;&gt;s[<span class="number">2</span>].x&gt;&gt;s[<span class="number">2</span>].y&gt;&gt;s[<span class="number">2</span>].z;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">-200</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">-200</span>; j &lt;= <span class="number">200</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">-200</span>; k &lt;= <span class="number">200</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i*s[<span class="number">1</span>].x + j*s[<span class="number">1</span>].y + k*s[<span class="number">1</span>].z == <span class="number">0</span> &amp;&amp; i*s[<span class="number">2</span>].x + j*s[<span class="number">2</span>].y + k*s[<span class="number">2</span>].z == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;k;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B - 小A的卡牌游戏</p><p>算法：dp</p><p>题解：如果题目简化为两组数a和b，则可按照b-a 降序排序，然后贪心地先选择b再选择a。基于此贪心思想，对本题使用dp，dp[i][j]表示在前i次选择中，有j次选择第三组卡牌c，剩余i-j次按照前面贪心思想选择剩余两组卡牌。每次状态转移时，比较前后两种状态（本次是否选择该组卡牌），取max即可。注意dp数组需初始化，最大值为-1e9，可更小。</p><p>代码：时间复杂度O($n^2$)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span> + <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> n, A, B, C;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;y) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b-a == y.b-y.a) <span class="keyword">return</span> c &gt; y.c;</span><br><span class="line"><span class="keyword">return</span> b-a &gt; y.b-y.a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;v[<span class="number">15010</span>];</span><br><span class="line"> </span><br><span class="line">ll dp[N][N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IOS;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;A&gt;&gt;B&gt;&gt;C;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin&gt;&gt;v[i].a&gt;&gt;v[i].b&gt;&gt;v[i].c;</span><br><span class="line"><span class="built_in">sort</span>(v<span class="number">+1</span>, v+n<span class="number">+1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i<span class="number">+1</span>; j &lt;= C; j++)</span><br><span class="line">dp[i][j] = <span class="number">-1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">min</span>(C, i); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j) dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + v[i].c);</span><br><span class="line"><span class="keyword">if</span>(i-j &lt;= B) dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i<span class="number">-1</span>][j] + v[i].b);</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i<span class="number">-1</span>][j] + v[i].a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[n][C];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C - 小A的期末考试</p><p>算法：模拟</p><p>题解：简单模拟，注意输出的格式。</p><p>代码：时间复杂度O(n)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> n, m, sum;</span><br><span class="line"><span class="type">double</span> mid;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;y) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; y.a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;s[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IOS;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;s[i].a&gt;&gt;s[i].b;</span><br><span class="line">sum += s[i].b;</span><br><span class="line">&#125;</span><br><span class="line">mid = <span class="number">1.0</span>*sum/n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i].a == m) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i].b &lt; <span class="number">60</span>) s[i].b = <span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1.0</span>*s[i].b &gt;= mid + eps) s[i].b -= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i].b &lt; <span class="number">0</span>) s[i].b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(s<span class="number">+1</span>, s+n<span class="number">+1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++) cout&lt;&lt;s[i].b&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;s[n].b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D - Zztrans的班级合照</p><p>算法：dp</p><p>题解：dp[i][j]表示两排共选择了i个人，第一排比第二排多j个人。使用数组cnt存储相同身高的人数，将身高升序排序，去重。第一层循环表示选择身高为a[i]的学生，第二层循环表示目前第一排比第二排多j个学生，第三层循环表示在身高为a[i]的学生中选择k个放在第二排，剩余cnt[a[i]]-k个放在第一排。（这k个学生放第一排或者放第二排都可，只是状态转移方程有一些不同）</p><blockquote><p>假设之前第一排有x+j个学生，第二排有x个学生，则放置k个学生之后，第一排学生总数变为x+j+cnt[a[i]]-k，第二排变为x+k，此时第一排和第二排的学生数量差值为now &#x3D; j+cnt[a[i]]-2*k，当差值大于0的时候才是有效转移。所以现在的状态dp[i][now]可以从上次的的状态dp[i-1][j]转移，由于选择的是身高为a[i]的一类学生，学生们身高一样但代表着的还是不同的人，所以需要乘以该身高学生个数的阶乘。（阶乘在开始预处理并存储在数组里面）</p></blockquote><p>代码：时间复杂度O($n^2$)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span> + <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll a[N], cnt[N], dp[N][N], fac[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_fac</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N; i++) (fac[i] = fac[i<span class="number">-1</span>]*i)%=mod;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IOS;</span><br><span class="line"><span class="built_in">init_fac</span>();</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">cnt[a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a<span class="number">+1</span>, a+n<span class="number">+1</span>);</span><br><span class="line"><span class="type">int</span> nn = <span class="built_in">unique</span>(a<span class="number">+1</span>, a+n<span class="number">+1</span>)-(a<span class="number">+1</span>);</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nn; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= cnt[a[i]]; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> now = j+cnt[a[i]]<span class="number">-2</span>*k;</span><br><span class="line"><span class="keyword">if</span>(now &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">(dp[i][now] += dp[i<span class="number">-1</span>][j]*fac[cnt[a[i]]])%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[nn][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>E - Zztrans的庄园</p><p>算法：概率与期望</p><p>题解：基本期望知识。期望定义式：<img src="/./The%202021%20Shanghai%20Collegiate%20Programming%20Contest(A%20B%20C%20D%20E%20G%20J)/image.png"> </p><p>代码：时间复杂度：O(n)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">double</span> sum;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// IOS;</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> s; <span class="type">double</span> x; cin&gt;&gt;s&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">&#x27;A&#x27;</span>) x *= <span class="number">57</span>;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">&#x27;B&#x27;</span>) x *= <span class="number">31</span>;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">&#x27;C&#x27;</span>) x *= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">&#x27;D&#x27;</span>) x *= <span class="number">-7</span>;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">&#x27;S&#x27;</span>) x *= <span class="number">9977</span>;</span><br><span class="line">sum += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.4f&quot;</span>, sum*k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>G - 鸡哥的雕像</p><p>算法：逆元</p><p>题解：每个位置的答案就是所有的数的乘积除以该位置上的数字并对998244353取模，使用逆元计算sum&#x2F;a[i]，即sum*ksm(a[i], mod-2)（ksm为快速幂函数）。但由于998244353 &lt; 1e9。所以分三种情况：给出的数中有两个及以上的998244353，这样的话所有的位置最终结果都为0；给出的数中有一位是998244353，则只有这一位上的结果为其它为上数的乘积，其他位全为0；没有出现998244353，则按照正常公式计算。</p><p>代码：时间复杂度O(n)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) (res *= a)%=mod;</span><br><span class="line">        (a *= a)%=mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ll n, cnt;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="type">int</span> vis[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IOS;</span><br><span class="line">ll sum = <span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">if</span>(a[i] == mod) vis[i] = <span class="number">1</span>, cnt++;</span><br><span class="line"><span class="keyword">else</span> (sum *= a[i])%=mod;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt &gt;= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++) cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i]) cout&lt;&lt;sum&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(vis[n]) cout&lt;&lt;sum;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span> ;i++) cout&lt;&lt;sum*<span class="built_in">ksm</span>(a[i], mod<span class="number">-2</span>)%mod&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="function">sum*<span class="title">ksm</span><span class="params">(a[n], mod<span class="number">-2</span>)</span>%mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>J - Alice and Bob 1</p><p>算法：思维</p><p>题解：若数据全为正值：在轮流取卡片的过程中，Alice拿当前最大的，Bob取第二大的即可保证Alice取得的为最大值。但由于题目最后的结果为绝对值且所给数据中有负值，所以在数据按递减排序后，会有Alice从前往后取，先取正值再取负值综合为正值，和从后往前取，先取负值再取正值总和为负值，这两种结果的绝对值都有可能是最大值。</p><blockquote><p>例如第一组数据： 5 3 2 1 -1 -2 这种情况下Alice要从前往后取。第二组数据：1 2 -3 -5 -7 -8这种情况下Alice要从后往前取。</p></blockquote><p>代码：时间复杂度O(n)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span> + <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll sum1, sum2, sum;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IOS;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin&gt;&gt;a[i], sum += a[i];</span><br><span class="line"><span class="built_in">sort</span>(a<span class="number">+1</span>, a+n<span class="number">+1</span>, cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>) sum1 += a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i -= <span class="number">2</span>) sum2 += a[i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(sum1) &gt; <span class="built_in">abs</span>(sum2)) cout&lt;&lt;(ll)<span class="built_in">abs</span>(sum1) - (ll)<span class="built_in">abs</span>(sum-sum1);</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;(ll)<span class="built_in">abs</span>(sum2) - (ll)<span class="built_in">abs</span>(sum-sum2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./The%202021%20Shanghai%20Collegiate%20Programming%20Contest(A%20B%20C%20D%20E%20G%20J)/Image-1.png"></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
