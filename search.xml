<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>3d_coordinates.hdev</title>
      <link href="/2024/10/09/3d_coordinates.hdev/"/>
      <url>/2024/10/09/3d_coordinates.hdev/</url>
      
        <content type="html"><![CDATA[<h1 id="3d-coordinates-hdev"><a href="#3d-coordinates-hdev" class="headerlink" title="3d_coordinates.hdev"></a>3d_coordinates.hdev</h1><p>关于相机标定的详细解释，请参考：<a href="https://blog.csdn.net/cashmood/article/details/100089295">Halcon相机标定</a></p><hr><blockquote><p><strong>功能：相机在3D空间的标定</strong>，对象会倾斜和旋转。标定的主要目的是确定相机的参数<em>CamParam</em>（如焦距、主点坐标、畸变系数、相机在世界坐标系中的位置和姿态等）。这些参数是准确测量和3D重建的基础。标定后进行测量，计算标定板的边距与标志点的直径，并通过测量结果的标准差反映标定效果。</p></blockquote><ol><li><p>设置窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dev_close_window ()</span><br><span class="line">dev_open_window (0, 0, 768, 576, &#x27;black&#x27;, WindowHandle)</span><br><span class="line">dev_update_off ()</span><br><span class="line">dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">dev_set_line_width (3)</span><br><span class="line">set_display_font (WindowHandle, 14, &#x27;mono&#x27;, &#x27;true&#x27;, &#x27;false&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>创建标定数据和相机参数，读取多张标定图像并寻找标定板，提取并显示标定板的轮廓与位置，最后进行相机标定，计算出相机参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">* 标定板描述文件</span><br><span class="line">CalTabDescrFile := &#x27;caltab_big.descr&#x27; </span><br><span class="line">* 相机参数</span><br><span class="line">gen_cam_par_area_scan_division (0.008, 0, 0.0000086, 0.0000086, 384, 288, 768, 576, StartCamPar)</span><br><span class="line">* 创建标定数据对象</span><br><span class="line">create_calib_data (&#x27;calibration_object&#x27;, 1, 1, CalibDataID) </span><br><span class="line">* 将相机参数设置到标定数据对象中</span><br><span class="line">set_calib_data_cam_param (CalibDataID, 0, [], StartCamPar)</span><br><span class="line">* 将标定板描述文件与标定数据对象关联</span><br><span class="line">set_calib_data_calib_object (CalibDataID, 0, CalTabDescrFile)</span><br><span class="line"></span><br><span class="line">NumImages := 10</span><br><span class="line">for I := 1 to NumImages by 1</span><br><span class="line">    read_image (Image, &#x27;calib/calib-3d-coord-&#x27; + I$&#x27;02d&#x27;)</span><br><span class="line">    dev_display (Image)</span><br><span class="line">    Message := &#x27;Find calibration plate in\nall calibration images (&#x27; + I + &#x27;/&#x27; + NumImages + &#x27;)&#x27;</span><br><span class="line">    disp_message (WindowHandle, Message, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    * 在图像中查找标定板，根据标定数据ID和图像索引（I-1）进行查找</span><br><span class="line">    find_calib_object (Image, CalibDataID, 0, 0, I - 1, [], [])</span><br><span class="line">    * 从标定数据中获取相机的初始参数</span><br><span class="line">    get_calib_data (CalibDataID, &#x27;camera&#x27;, 0, &#x27;init_params&#x27;, StartCamPar)</span><br><span class="line">    * 获取标定过程中观察到的标定点的坐标和姿态</span><br><span class="line">    get_calib_data_observ_points (CalibDataID, 0, 0, I - 1, Row, Column, Index, Pose)</span><br><span class="line">    * 获取标定板的轮廓数据</span><br><span class="line">    get_calib_data_observ_contours (Contours, CalibDataID, &#x27;caltab&#x27;, 0, 0, I - 1)</span><br><span class="line">    * 生成一个十字形轮廓，中心在找到的标定点位置</span><br><span class="line">    gen_cross_contour_xld (Cross, Row, Column, 6, 0.785398)</span><br><span class="line">    dev_set_color (&#x27;green&#x27;)</span><br><span class="line">    dev_display (Contours)</span><br><span class="line">    dev_set_color (&#x27;yellow&#x27;)</span><br><span class="line">    dev_display (Cross)</span><br><span class="line">endfor</span><br><span class="line">disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">stop ()</span><br><span class="line">* 执行相机标定，计算相机的实际参数</span><br><span class="line">calibrate_cameras (CalibDataID, Error)</span><br><span class="line">* 获取标定后的相机参数</span><br><span class="line">get_calib_data (CalibDataID, &#x27;camera&#x27;, 0, &#x27;params&#x27;, CamParam)</span><br></pre></td></tr></table></figure></li><li><p>对每张图像进行测量，包括标定板宽度和孔半径。然后转换坐标系，将测量结果从图像坐标转换到世界坐标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">for I := 1 to NumImages by 1</span><br><span class="line">    read_image (Image, &#x27;calib/calib-3d-coord-&#x27; + I$&#x27;02d&#x27;)</span><br><span class="line">    * 根据相机参数和标定数据，从图像中获取测量位置，包括板的中心行列和方向</span><br><span class="line">    get_measure_positions (Image, PlateRegion, CalibDataID, I, Distance, Phi, RowCenter, ColumnCenter)</span><br><span class="line">    * 生成一个矩形轮廓，位置和方向基于测量结果</span><br><span class="line">    gen_rectangle2_contour_xld (Rectangle, RowCenter, ColumnCenter, Phi, Distance * 0.52, 8)</span><br><span class="line">    * 生成一个测量矩形，用于后续的测量操作</span><br><span class="line">    gen_measure_rectangle2 (RowCenter, ColumnCenter, Phi, Distance * 0.52, 8, 768, 576, &#x27;nearest_neighbor&#x27;, MeasureHandle)</span><br><span class="line">    * 对图像进行测量，获取矩形边缘的位置、强度和测量结果</span><br><span class="line">    measure_pos (Image, MeasureHandle, 1, 40, &#x27;all&#x27;, &#x27;all&#x27;, RowEdge, ColumnEdge, Amplitude, Distance1)</span><br><span class="line"></span><br><span class="line">    Rows := [RowEdge[0],RowEdge[|RowEdge| - 1]]</span><br><span class="line">    Columns := [ColumnEdge[0],ColumnEdge[|RowEdge| - 1]]</span><br><span class="line">    * 生成一个十字形轮廓，表示测量的边缘位置</span><br><span class="line">    gen_cross_contour_xld (Cross, Rows, Columns, 16, Phi)</span><br><span class="line"></span><br><span class="line">    * 获取标定对象的姿态信息</span><br><span class="line">    get_calib_data (CalibDataID, &#x27;calib_obj_pose&#x27;, [0,I - 1], &#x27;pose&#x27;, Pose)</span><br><span class="line">    * 将图像坐标转换为世界坐标系</span><br><span class="line">    image_points_to_world_plane (CamParam, Pose, Rows, Columns, &#x27;m&#x27;, SX, SY)</span><br><span class="line">    * 测量出的宽度</span><br><span class="line">    distance_pp (SY[0], SX[0], SY[1], SX[1], Width)</span><br><span class="line">   </span><br><span class="line">    dev_display (Image)</span><br><span class="line">    dev_set_color (&#x27;white&#x27;)</span><br><span class="line">    dev_set_line_width (3)</span><br><span class="line">    dev_display (Rectangle)</span><br><span class="line">    dev_set_color (&#x27;green&#x27;)</span><br><span class="line">    dev_set_draw (&#x27;fill&#x27;)</span><br><span class="line">    dev_set_line_width (2)</span><br><span class="line">    dev_display (Cross)</span><br><span class="line">    dev_set_draw (&#x27;margin&#x27;)</span><br><span class="line">    disp_message (WindowHandle, &#x27;Width = &#x27; + (Width * 100)$&#x27;8.3f&#x27; + &#x27;cm&#x27;, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    stop ()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    * 对标定板内区域进行圆形腐蚀操作，生成ROI</span><br><span class="line">    erosion_circle (PlateRegion, ROI, 17.5)</span><br><span class="line">    reduce_domain (Image, ROI, ImageReduced)</span><br><span class="line">    * 边缘检测</span><br><span class="line">    edges_sub_pix (ImageReduced, Edges, &#x27;canny&#x27;, 1, 20, 60)</span><br><span class="line">    * 通过长度筛选</span><br><span class="line">    select_contours_xld (Edges, SelectedEdges, &#x27;contour_length&#x27;, 20, 99999999, -0.5, 0.5)</span><br><span class="line">    </span><br><span class="line">    * 对选中的轮廓进行椭圆拟合，输出椭圆的参数（中心行列、角度、半径等）</span><br><span class="line">    fit_ellipse_contour_xld (SelectedEdges, &#x27;fitzgibbon&#x27;, -1, 2, 0, 200, 3, 2, Row, Column, Phi, Radius1, Radius2, StartPhi, EndPhi, PointOrder)</span><br><span class="line">    * 计算拟合得到的半径的平均值和标准偏差</span><br><span class="line">    MeanRadius1 := mean(Radius1)</span><br><span class="line">    MeanRadius2 := mean(Radius2)</span><br><span class="line">    DevRadius1 := deviation(Radius1)</span><br><span class="line">    DevRadius2 := deviation(Radius2)</span><br><span class="line">    </span><br><span class="line">    * 将选中的轮廓转换到世界坐标系</span><br><span class="line">    contour_to_world_plane_xld (SelectedEdges, WorldCircles, CamParam, Pose, &#x27;mm&#x27;)</span><br><span class="line">    </span><br><span class="line">    * 对世界坐标系中的圆进行椭圆拟合，输出参数</span><br><span class="line">    fit_ellipse_contour_xld (WorldCircles, &#x27;fitzgibbon&#x27;, -1, 2, 0, 200, 3, 2, Row, Column, Phi, RadiusW1, RadiusW2, StartPhi, EndPhi, PointOrder)</span><br><span class="line">    MeanRadiusW1 := mean(RadiusW1)</span><br><span class="line">    MeanRadiusW2 := mean(RadiusW2)</span><br><span class="line">    DevRadiusW1 := deviation(RadiusW1)</span><br><span class="line">    DevRadiusW2 := deviation(RadiusW2)</span><br><span class="line">    </span><br><span class="line">    dev_display (Image)</span><br><span class="line">    dev_set_color (&#x27;yellow&#x27;)</span><br><span class="line">    dev_set_line_width (3)</span><br><span class="line">    dev_display (SelectedEdges)</span><br><span class="line">    Message := &#x27;Measured dimensions of the ellipses&#x27;</span><br><span class="line">    Message[0] := &#x27;                    Mean Radius1; Mean Radius2; (Standard deviations [%])&#x27;</span><br><span class="line">    * 图像坐标系下的平均半径及其标准偏差</span><br><span class="line">    Message[1] := &#x27;Image coordinates:       &#x27; + MeanRadius1$&#x27;5.2f&#x27; + &#x27;px; &#x27; + MeanRadius2$&#x27;5.2f&#x27; + &#x27;px            (&#x27; + (DevRadius1 / MeanRadius1 * 100)$&#x27;4.2f&#x27; + &#x27;, &#x27; + (DevRadius2 / MeanRadius2 * 100)$&#x27;4.2f&#x27; + &#x27;)&#x27;</span><br><span class="line">    * 世界坐标系下的平均半径及其标准偏差</span><br><span class="line">    Message[2] := &#x27;World coordinates:       &#x27; + (MeanRadiusW1 / 10)$&#x27;5.2f&#x27; + &#x27;cm; &#x27; + (MeanRadiusW2 / 10)$&#x27;5.2f&#x27; + &#x27;cm            (&#x27; + (DevRadiusW1 / MeanRadiusW1 * 100)$&#x27;4.2f&#x27; + &#x27;, &#x27; + (DevRadiusW2 / MeanRadiusW2 * 100)$&#x27;4.2f&#x27; + &#x27;)&#x27;</span><br><span class="line">    disp_message (WindowHandle, Message, &#x27;window&#x27;, 12, 12, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    if (I &lt; 10)</span><br><span class="line">        disp_continue_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">        stop ()</span><br><span class="line">    else</span><br><span class="line">        disp_end_of_program_message (WindowHandle, &#x27;black&#x27;, &#x27;true&#x27;)</span><br><span class="line">    endif</span><br><span class="line">endfor</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
